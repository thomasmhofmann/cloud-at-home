---
# Source: gitpod/charts/rabbitmq/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: messagebus
  namespace: "gitpod"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: gitpod
  ingress:
    # Allow inbound connections
    - ports:
        - port: 4369  # EPMD
        - port: 5672
        - port: 5671
        - port: 25672
        - port: 15672
    # Allow prometheus scrapes
    - ports:
        - port: 9419
---
# Source: gitpod/templates/agent-smith-networkpolicy.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agent-smith-deny-all-ingress
  labels:
    app: gitpod
    component: agent-smith
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: gitpod
      component: agent-smith
      stage: production
  policyTypes:
  - Ingress
---
# Source: gitpod/templates/blobserve-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: blobserve
  labels:
    app: gitpod
    component: blobserve
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: gitpod
      component: blobserve
  policyTypes:
  - Ingress
  ingress:
  - ports:
    - protocol: TCP
      port: 32224
    from:
    - podSelector:
        matchLabels:
          app: gitpod
          component: proxy
    - podSelector:
        matchLabels:
          app: gitpod
          component: ws-proxy
---
# Source: gitpod/templates/content-service-networkpolicy.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: content-service
  labels:
    app: gitpod
    component: content-service
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: gitpod
      component: content-service
  policyTypes:
  - Ingress
  ingress:
  - {}
---
# Source: gitpod/templates/dashboard-deny-all-allow-explicit-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: dashboard-deny-all-allow-explicit
  labels:
    app: gitpod
    component: dashboard
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: gitpod
      component: dashboard
  policyTypes:
  - Ingress
  ingress:
  - ports:
    - protocol: TCP
      port: 80
    from:
    # Allow ingress on port 80 from component:
    - podSelector:
        matchLabels:
          app: gitpod
          component: proxy
---
# Source: gitpod/templates/db-deny-all-allow-explicit-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-deny-all-allow-explicit
  labels:
    app: gitpod
    component: db
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: gitpod
      component: db
  policyTypes:
  - Ingress
  ingress:
  - ports:
    - protocol: TCP
      port: 3306
    from:
    # Allow ingress on port 3306 from component:
    - podSelector:
        matchLabels:
          app: gitpod
          component: server
    - podSelector:
        matchLabels:
          app: gitpod
          component: credit-watcher
    - podSelector:
        matchLabels:
          app: gitpod
          component: agent-smith
    - podSelector:
        matchLabels:
          app: gitpod
          component: payment-endpoint
    - podSelector:
        matchLabels:
          app: gitpod
          component: ws-manager-bridge
    - podSelector:
        matchLabels:
          app: gitpod
          component: db-migrations
    - podSelector:
        matchLabels:
          app: gitpod
          component: postman
---
# Source: gitpod/templates/image-builder-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: image-builder
  labels:
    app: gitpod
    component: image-builder
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: gitpod
      component: image-builder
  policyTypes:
  - Ingress
  - Egress
  ingress:
    # server
  - from:
    - podSelector:
        matchLabels:
          app: gitpod
          component: server
  egress:
  - to:
    # Allow egress to everywhere, except...
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        # Google Compute engine special, reserved VM metadata IP
        - 169.254.169.254/32
---
# Source: gitpod/templates/proxy-deny-all-allow-explicit-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: proxy-deny-all-allow-explicit
  labels:
    app: gitpod
    component: proxy
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: gitpod
      component: proxy
  policyTypes:
  - Ingress
  ingress:
  # Allow access to HTTP(S) ports from everywhere
  - ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  # Allow prometheus scraping from proxy /metrics endpoint
  - ports:
    - protocol: TCP
      port: 9145
    from:
    - namespaceSelector:
        matchLabels:
          chart: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
          component: server
---
# Source: gitpod/templates/registry-facade-allow-all-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: registry-facade
  labels:
    app: gitpod
    component: registry-facade
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: gitpod
      component: registry-facade
  policyTypes:
  - Ingress
  ingress:
  # allow ingress for everyone in the cluster. The workspace pods have an egress limit that prevents them from accessing the registry-facade service anyways.
  - {}
---
# Source: gitpod/templates/server-deny-all-allow-explicit-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: server-deny-all-allow-explicit
  labels:
    app: gitpod
    component: server
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: gitpod
      component: server
  policyTypes:
  - Ingress
  ingress:
  - ports:
    - protocol: TCP
      port: 3000
    from:
    # Allow ingress on port 3000 from component:
    - podSelector:
        matchLabels:
          app: gitpod
          component: proxy
  # Allow to access health and mornitoring endpoints listening on port 9500
  - ports:
    - protocol: TCP
      port: 9500
    from:
    - namespaceSelector:
        matchLabels:
          chart: monitoring
    - podSelector:
        matchLabels:
          app: gitpod
          component: proxy
---
# Source: gitpod/templates/workspace-networkpolicy-default.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: workspace-default
  labels:
    app: gitpod
    component: workspace
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      # not gitpod here because the workspaces know nothing about the helm deployment
      app: gitpod
      component: workspace
      gitpod.io/networkpolicy: default
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # TODO WSPROXY remove
  # ALLOW ingress from proxy
  - from:
    - podSelector:
        matchLabels:
          app: gitpod
          component: proxy
  - from:
    - podSelector:
        matchLabels:
          app: gitpod
          component: ws-proxy
  # ALLOW ingress from agent-smith
  - from:
    - podSelector:
        matchLabels:
          app: gitpod
          component: agent-smith
  # ALLOW ingress from ws-daemon
  - from:
    - podSelector:
        matchLabels:
          app: gitpod
          component: ws-daemon
  # ALLOW prometheus scraping from theia backend
  - ports:
    - protocol: TCP
      port: 23000
    from:
    - namespaceSelector:
        matchLabels:
          chart: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
          component: server
  # egress:
  # - to:
  #   - podSelector:
  #       matchLabels:
  #         app: gitpod
  #         component: proxy
  # - to:
  #   - namespaceSelector:
  #       matchLabels:
  #         component: proxy
  #     podSelector:
  #       matchLabels:
  #         app: staging-proxy
  # Allow egress to everywhere, except...
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        # The condition is necessary because the network setup in the devstaging cluster is different to prod/staging atm
#
#         # Local DNS server
#         - 10.0.0.0/24
#         # Cluster local traffic (pods, services)
#         - 10.0.0.0/8
#
        # Google Compute engine special, reserved VM metadata IP
        - 169.254.169.254/32
  # As the except rules (10.0.0.0/x) above block access to the proxy (even via external IPs!!!): Explicitly allow it here!
  - to:
    - podSelector:
        matchLabels:
          app: gitpod
          component: proxy
---
# Source: gitpod/templates/ws-daemon-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ws-daemon
  labels:
    app: gitpod
    component: ws-daemon
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: gitpod
      component: ws-daemon
  policyTypes:
  - Ingress
  ingress:
  - ports:
    - protocol: TCP
      port: 8080
    from:
    - podSelector:
        matchLabels:
          app: gitpod
          component: ws-manager
  - ports:
    - protocol: TCP
      port: 9500
    from:
    - namespaceSelector:
        matchLabels:
          chart: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
          component: server
---
# Source: gitpod/templates/ws-manager-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ws-manager
  labels:
    app: gitpod
    component: ws-manager
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: gitpod
      component: ws-manager
  policyTypes:
  - Ingress
  ingress:
  - {}
---
# Source: gitpod/templates/ws-proxy-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ws-proxy
  labels:
    app: gitpod
    component: ws-proxy
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: gitpod
      component: ws-proxy
  policyTypes:
  - Ingress
  ingress:
  # Allow access to HTTP/HTTPS proxy ports from everywhere
  - ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
---
# Source: gitpod/templates/ws-scheduler-networkpolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ws-scheduler
  labels:
    app: gitpod
    component: ws-scheduler
    kind: networkpolicy
    stage: production
spec:
  podSelector:
    matchLabels:
      app: gitpod
      component: ws-scheduler
  policyTypes:
  - Ingress
  ingress:
  - {}
---
# Source: gitpod/templates/cluster-privileged-podsecuritypolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: gitpod-ns-privileged
  labels:
    app: gitpod
    component: cluster
    kind: podsecuritypolicy
    stage: production
  annotations:
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: true
  allowPrivilegeEscalation: true
  allowedCapabilities:
  - '*'
  volumes:
  - '*'
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  hostIPC: true
  hostPID: true
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
---
# Source: gitpod/templates/cluster-privileged-unconfined-podsecuritypolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  # This PSP *must* be used before the psp:privileged coming from gitpod. The PSP controller will order them alphabetically by name.
  # See https://kubernetes.io/docs/concepts/policy/pod-security-policy/#policy-order.
  name: gitpod-ns-privileged-unconfined
  labels:
    app: gitpod
    component: cluster
    kind: podsecuritypolicy
    stage: production
  annotations:
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'unconfined'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'unconfined'
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default,unconfined'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: true
  allowPrivilegeEscalation: true
  allowedCapabilities:
  - '*'
  volumes:
  - '*'
  hostNetwork: false
  hostPorts:
  - min: 0
    max: 65535
  hostIPC: false
  hostPID: true
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
---
# Source: gitpod/templates/cluster-restricted-root-podsecuritypolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

# Taken from the examples here:
# Examples: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#example-policies
# File: https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/policy/restricted-psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: gitpod-ns-restricted-root-user
  labels:
    app: gitpod
    component: cluster
    kind: podsecuritypolicy
    stage: production
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  #####
  # The nginx master process (currently?) runs as root, thus we have to turn some safe things off
  #####
  ### TODO root proxy
  privileged: true
  # # Required to prevent escalations to root.
  # allowPrivilegeEscalation: false
  # # This is redundant with non-root + disallow privilege escalation,
  # # but we can provide it for defense in depth.
  # requiredDropCapabilities:
  #   - ALL
  ### TODO root proxy
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'projected'
    - 'secret'
    - 'emptyDir'
    - 'persistentVolumeClaim'
    - 'hostPath'
  hostNetwork: true
  hostIPC: false
  hostPID: false
  hostPorts:
  - min: 30000
    max: 33000
  runAsUser:
    ### TODO root proxy
    rule: 'RunAsAny'
    ### TODO root proxy
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: gitpod/templates/cluster-unprivileged-podsecuritypolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

# Taken from the examples here:
# Examples: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#example-policies
# File: https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/policy/restricted-psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: gitpod-ns-unprivileged
  labels:
    app: gitpod
    component: cluster
    kind: podsecuritypolicy
    stage: production
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: false
  # Required to prevent escalations to root.
  allowPrivilegeEscalation: false
  # This is redundant with non-root + disallow privilege escalation,
  # but we can provide it for defense in depth.
  requiredDropCapabilities:
    - ALL
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    # - 'downwardAPI'
    # Assume that persistentVolumes set up by the cluster admin are safe to use.
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    # Require the container to run without root privileges.
    rule: 'MustRunAsNonRoot'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: gitpod/templates/registry-facade-podsecuritypolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

# Taken from the examples here:
# Examples: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#example-policies
# File: https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/policy/restricted-psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: gitpod-ns-registry-facade
  labels:
    app: gitpod
    component: cluster
    kind: podsecuritypolicy
    stage: production
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  #####
  # The nginx master process (currently?) runs as root, thus we have to turn some safe things off
  #####
  ### TODO root proxy
  # privileged: false
  # # Required to prevent escalations to root.
  # allowPrivilegeEscalation: false
  # # This is redundant with non-root + disallow privilege escalation,
  # # but we can provide it for defense in depth.
  # requiredDropCapabilities:
  #   - ALL
  ### TODO root proxy
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'secret'
    - 'emptyDir'
    - 'hostPath'
  hostNetwork: true
  hostIPC: false
  hostPID: false
  hostPorts:
  - min: 30000
    max: 33000
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: gitpod/templates/workspace-podsecuritypolicy.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

# Taken from the examples here:
# Examples: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#example-policies
# File: https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/policy/restricted-psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: gitpod-ns-workspace
  labels:
    app: gitpod
    component: workspace
    kind: podsecuritypolicy
    stage: production
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default,unconfined'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: true
  # # This is redundant with non-root + disallow privilege escalation,
  # # but we can provide it for defense in depth.
  allowedCapabilities:
    - AUDIT_WRITE
    - FSETID
    - KILL
    - NET_BIND_SERVICE
    - SYS_PTRACE
  volumes:
    - 'configMap'
    - 'projected'
    - 'secret'
    - 'hostPath'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: gitpod/charts/rabbitmq/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: messagebus
  namespace: "gitpod"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: gitpod
---
# Source: gitpod/charts/minio/templates/post-install-prometheus-metrics-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-8.0.10
    release: gitpod
    heritage: Helm
---
# Source: gitpod/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "minio"
  namespace: "gitpod"
  labels:
    app: minio
    chart: minio-8.0.10
    release: "gitpod"
---
# Source: gitpod/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: messagebus
  namespace: "gitpod"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: messagebus
---
# Source: gitpod/templates/agent-smith-service-account.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: agent-smith
  labels:
    app: gitpod
    component: agent-smith
    kind: service-account
    stage: production
---
# Source: gitpod/templates/blobserve-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: blobserve
  labels:
    app: gitpod
    component: blobserve
    kind: service-account
    stage: production
---
# Source: gitpod/templates/cluster-nobody-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nobody
  labels:
    app: gitpod
    component: cluster
    kind: service-account
    stage: production
automountServiceAccountToken: false
---
# Source: gitpod/templates/content-service-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: content-service
  labels:
    app: gitpod
    component: content-service
    kind: service-account
    stage: production
---
# Source: gitpod/templates/dashboard-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: dashboard
  labels:
    app: gitpod
    component: dashboard
    kind: service-account
    stage: production
automountServiceAccountToken: false
---
# Source: gitpod/templates/db-migrations-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: db-migrations
  labels:
    app: gitpod
    component: db-migrations
    kind: service-account
    stage: production
automountServiceAccountToken: false
---
# Source: gitpod/templates/db-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: db
  labels:
    app: gitpod
    component: db
    kind: service-account
    stage: production
automountServiceAccountToken: false
---
# Source: gitpod/templates/image-builder-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: image-builder
  labels:
    app: gitpod
    component: image-builder
    kind: service-account
    stage: production
---
# Source: gitpod/templates/proxy-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: proxy
  labels:
    app: gitpod
    component: proxy
    kind: service-account
    stage: production
automountServiceAccountToken: false
---
# Source: gitpod/templates/registry-facade-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: registry-facade
  labels:
    app: gitpod
    component: registry-facade
    kind: service-account
    stage: production
---
# Source: gitpod/templates/server-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: server
  labels:
    app: gitpod
    component: server
    kind: service-account
    stage: production
---
# Source: gitpod/templates/workspace-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: workspace
  labels:
    app: gitpod
    component: workspace
    kind: service-account
    stage: production
---
# Source: gitpod/templates/ws-daemon-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: ws-daemon
  labels:
    app: gitpod
    component: ws-daemon
    kind: service-account
    stage: production
---
# Source: gitpod/templates/ws-manager-bridge-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: ws-manager-bridge
  labels:
    app: gitpod
    component: ws-manager-bridge
    kind: service-account
    stage: production
---
# Source: gitpod/templates/ws-manager-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: ws-manager
  labels:
    app: gitpod
    component: ws-manager
    kind: service-account
    stage: production
---
# Source: gitpod/templates/ws-proxy-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: ws-proxy
  labels:
    app: gitpod
    component: ws-proxy
    kind: service-account
    stage: production
---
# Source: gitpod/templates/ws-scheduler-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: ws-scheduler
  labels:
    app: gitpod
    component: ws-scheduler
    kind: service-account
    stage: production
---
# Source: gitpod/charts/docker-registry/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  labels:
    app: docker-registry
    chart: docker-registry-1.11.0
    heritage: Helm
    release: gitpod
type: Opaque
data:
  haSharedSecret: "WXBhNzU0VDRodHBxckVObg=="
---
# Source: gitpod/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: gitpod
    heritage: Helm
type: Opaque
data:
  accesskey: "eW91ci1yYW5kb20tYWNjZXNzLWtleQ=="
  secretkey: "eW91ci1yYW5kb20tc2VjcmV0LWtleQ=="
---
# Source: gitpod/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: messagebus
  namespace: "gitpod"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
---
# Source: gitpod/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: load-definition
  namespace: "gitpod"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  load_definition.json: |
    {
      "users": [{
        "name": "your-rabbitmq-user",
        "password": "your-secret-rabbitmq-password",
        "tags": "administrator"
      }],
      "vhosts": [{
        "name": "/"
      }],
      "parameters": [],
      "permissions": [{
        "user": "your-rabbitmq-user",
        "vhost": "/",
        "configure": ".*",
        "write": ".*",
        "read": ".*"
      }],
      "exchanges": [{
        "name": "gitpod.ws",
        "vhost": "/",
        "type": "topic",
        "durable": true,
        "auto_delete": false
      }, {
        "name": "gitpod.ws.local",
        "vhost": "/",
        "type": "topic",
        "durable": true,
        "auto_delete": false
      }, {
        "name": "wsman",
        "vhost": "/",
        "type": "topic",
        "durable": false,
        "auto_delete": false
      }, {
        "name": "consensus-leader",
        "vhost": "/",
        "type": "fanout",
        "durable": false,
        "auto_delete": false
      }],
      "bindings": [{
        "source": "gitpod.ws.local",
        "vhost": "/",
        "destination": "gitpod.ws",
        "destination_type": "exchange",
        "routing_key": "#",
        "arguments": {}
      }],
      "queues": [{
        "name": "consensus-peers",
        "vhost": "/",
        "durable": false,
        "auto_delete": false,
        "arguments": {}
      }, {
        "name": "pwsupdatable",
        "vhost": "/",
        "durable": true,
        "auto_delete": false,
        "arguments": {}
      }],
      "policies": [{
        "name": "ha-all",
        "vhost": "/",
        "pattern": ".*",
        "definition": {
          "ha-mode": "all",
          "ha-sync-mode": "automatic",
          "ha-sync-batch-size": 5
        }
      }]
    }
---
# Source: gitpod/templates/builtin-registry-auth-secret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
apiVersion: v1
kind: Secret
metadata:
  name: builtin-registry-auth
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5sb2NhbGhvc3QiOnsiYXV0aCI6IloybDBjRzlrT25sdmRYSXRjbVZuYVhOMGNua3RjR0Z6YzNkdmNtUT0ifX19
  user: Z2l0cG9k
  password: eW91ci1yZWdpc3RyeS1wYXNzd29yZA==
---
# Source: gitpod/templates/builtin-registry-certs-secret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: Secret
metadata:
  name: builtin-registry-certs
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
  annotations:
    checksum/cert: 4eec6ba3e71c7431493e04d6588dd3f04f2e67169cfef98ffc343e5190a97433
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGekNDQWYrZ0F3SUJBZ0lRUTBWY1JFdDliK3h2TzdtZ2tIZkRqVEFOQmdrcWhraUc5dzBCQVFzRkFEQVcKTVJRd0VnWURWUVFERXd0M2MyUmhaVzF2YmkxallUQWVGdzB5TVRFeU1qTXlNRE0wTVRSYUZ3MHlNakV5TWpNeQpNRE0wTVRSYU1CWXhGREFTQmdOVkJBTVRDM2R6WkdGbGJXOXVMV05oTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBcG1rd3hXNUVxdXZqTVdRb3hzcTYraG1vZ0M3Vkx3R2ExTDdZZnJaUjdBOXoKTlREVHFNN3FqT25RclY0Umg4c2o1V21oa2FjUVRnTjJwcmtqV2I1MWRqcG9UYW5vc0NZYVBka09oVFJ4aDF2cQpDc3ZWazU4V1JRK3V0alJoUXVseTMyMGJDSnRqV2hpdkxiQ1N6eitHaC9GZXo0dWlpVUdNbFFHOXVrbXpkQ0k1CnEyaHloRUFWTE5yNGVrUHJYZEZCdUg4S01sZ1d5MW5QZ1I3THVxWTdkMEZDRkZubFZrM3ZsOXI0YWtsejBDRVQKVENQLzZmT3o1Qlg0VmIrK1hhcXZzU2ZoVWZDWW5mOUtJbWZpM01TdGplV2lGdHRNYWovZDZnbkZpRDMza3Jlcgo5NXZtWjVwY0J1YXh2aU1Od1kvWTRJaHBHTE9YL1FmQVMxNHJWWW43cHdJREFRQUJvMkV3WHpBT0JnTlZIUThCCkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQThHQTFVZEV3RUIKL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRk1wRE51dXZoUkEwUlpTT1k4eXFyckpvWkEvN01BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUNrblk1QVZsUEcvZ0tlWmVVZEhzZkZXQ3RhdVo1Sm9rMzRsM3N1WDdJUUxrUzAreGlnCndJN1ZPdGdtanBPcWVJZG9QczllUW52aEMyU2JldG5oMHU0aDZzTUpya2VsOXpTYUxwODc5R2dMcXBWRFdWZWsKaFNmQll0QURVSjFERE96c3hnSHpjNjlLVm42cENMMWx0M0VqMXhjTzM4Y1B0U2V4TnVPSnVoUVFCSmpMNit3ZQovV0RUTm4zOSt1SWFIR2hOQVN1RnEvb1Z4ZTBXa1VqMWhPSk0xN2o1bXMrMDlyS0gzTS9xYTNnWGdQSVBJNVNqClBZL2t2Qjc5UkFSdE9mbW12ajZJNmlNVU5BR0RadjVYNGRuVnZ1Z2E4TitWS0ZTeE1RaE5rSTBEWFY0Nk5EamkKTU5ZTmdjWGhDaDFzOWoxcjM0eGxicWVkM255bVFKeVVpdjFrCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBMHZPU2lZUXBsWjFUcFpaR0s3RWQ2VVJMWVdmWXU5SC9WR09USzNiakpwamFIQTlsCklTd1hXWFJDOE9qTmZ0UmRFcVprUFoxVUFscnVxREhwdnVhWDdHdGVxNy9pMDZuQ0Uzc2hSTEE1aW5jeDlLZWcKeXBHaW91T0hwdWVWSkVRT3JSREh6TDlMeVpXU0xGbGdEMUprNHZrenFKM0lFYzMwbVRUcm1jQ3cyTFM4RnYzZgpkS0ZlRVRiS0ZoRnZwK2tDSzVjbFBFd29pMmhYVjhZMnhPWUduK09OUjU1eVhZeksxSzF4VGhmTkhyK01XckpkClRReVluVm54TExkYmtBdml6aW8zL2RQTEdOdHJZNm5hcldjU2tKVGsrc3NPOFFVbmdraDVINFRYaWwrVDRRN2IKejFRMU9ZVUIwdVB5amgrbkRKUUFqcHRkdW00cFpKK3pNenpvZFFJREFRQUJBb0lCQUJVWW1yejU1SmE3eHhPMgpOWXBGQ2pLN3k3WVFCcEt4NjVEcTdGcmFadGtEVER5bUpYenR4ZUFDU25lQk1KdlFiUVppY1gvZjdmaldVeXVxCjRpOWZMQzVPaG9jeWgyS1hoWHNoUXpCMVZ5dkx3OGt0d2x5L3Q3NEdkeGh2N0hCV0JnbTB0ZVo1OHdCVDN1eGsKZThETWdwNVlRWnhKT3lyY3ArdHlhV1ZVNmRxaCtkTkdZQWxMQ1VYZUVGRGZCdy95M3YrN3gvaUM2aWlhTFFveApwSXArR0dLQ1FPdWkxVXN2TGhDN29qbjhGdWV4MGM1VFJpd1JSbzFSQkNTNVRWK1FrNmxwWXc0SWtSajhsQ1JtCmdtMWY2S2Z3UWlVSXlxMklKRWZwcTlrYmxkNVEvNWhucmFneFBaS1MvSWlIcnB0WnUzL284cWtMY0xkM2ZVTEUKWUtkVU1Ya0NnWUVBL0FrZGdueDFmVnE1Y3gra2dZNU15V1BMbEpOR0hQbGFXYjhiazcvcGhOTTIwMEhBNDJmUwpuT3d0ZDM1K21uMktNVzBadi90dEp3OUUvbXA2WUFlaTFsWU10SVFkQW45OGZQMFRwYno3WDFxR2lEaTVibndGCjd3Rkt3MkFlUXU4QXFkaVJGdXNoem9ydVB1bmxmVFJ2dUhhQUp0TmVXODBMaEd6TTBTaHNlaThDZ1lFQTFrVUYKZjBiejYrMUhIZm4zY0puTzRvTVkxbWtDTU81Tk5EQWRjZUJtdDEzTUV6MlRKdE10KzVvb05aWjY3alJ2endKVgpmV1MwcXdkRFgyOGowdlJmM0ZqN2cxZURHaGlRTGxmTDY5SzR6Yk1yUTNtSlpYYXUvNkZWcnNPNExaSDJaSXlLCitCQ3d1dzhmcWJJNUtSQ05ycDZuUGJuQUJrUS9Pajd0WTJ1NmNwc0NnWUFDK1FTTkZuUzRUc3FqTGZ0ZHY5VHUKQnl4T2kxSW5ZMVdLZTNPUzBZK3FqbWMySks5bXYwRy9zaFZ6TkYyLzZyMG5paGJrcWMyR3lXcFI2ZVdabmwxdwpVOEdBbTVKUUJqcnNxbnVCMS9ITEZTRkRHQkF2Mm15amZndG90SWlHMTVUVmJBV0NGTEhvWXNFZW90bWZHWEE3CjU4SHBNMU1JbUNtTG5WRHBJcVhzNXdLQmdBSHBvYy91Q1RWYzY5cVhwWjdLc0s4UzdvRFRkU0tNcmdHK1FEVUoKQk1HMFE2TVVWS0R2RjZUOFRrbVVLMHEvQ3hSMDkrQmpxcjB3Rm1qZXJCb3c5ajRZU1Q1MTVJU3lIVzljZDBTRwpvQUd1REwvUWNPcUg4YTMwZWJoU3BPMDdOVkRXZEZNY2l3ZFFiajdzaVZnVmZyNUZTa2JoeHBZSHUrekFMUXhMCkpPSHJBb0dBT213NjUzQmtCTmY2Vlg0L3RRTEZWQnBteE1oSzRZUmhsTkdSQWlZdDEySlFzZmtKWW05Qy9IMlUKVlN1YWFlcWQ1dXJJeVc3ZjJxNkpXTk1XWHVkSVdvWWRIaThYRmFwSjVlMWhadEJJMjlXazNxM2lYNWlCNndvdAo0WFowRVJmNkV3eHQrbHA0Q0FCK3dxZjRiaXh0b3JINW1mZWVTT0dJZGJzTyt1RDA0bGM9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  # Docker registry needs this file to end with .crt
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lRUVNxcm1XMFRONDY4eDdpSVJ0R2trakFOQmdrcWhraUc5dzBCQVFzRkFEQVcKTVJRd0VnWURWUVFERXd0M2MyUmhaVzF2YmkxallUQWVGdzB5TVRFeU1qTXlNRE0wTVRSYUZ3MHlNakV5TWpNeQpNRE0wTVRSYU1CRXhEekFOQmdOVkJBTVRCbWRwZEhCdlpEQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFOTHprb21FS1pXZFU2V1dSaXV4SGVsRVMyRm4yTHZSLzFSamt5dDI0eWFZMmh3UFpTRXMKRjFsMFF2RG96WDdVWFJLbVpEMmRWQUphN3FneDZiN21sK3hyWHF1LzR0T3B3aE43SVVTd09ZcDNNZlNub01xUgpvcUxqaDZibmxTUkVEcTBReDh5L1M4bVZraXhaWUE5U1pPTDVNNmlkeUJITjlKazA2NW5Bc05pMHZCYjkzM1NoClhoRTJ5aFlSYjZmcEFpdVhKVHhNS0l0b1YxZkdOc1RtQnAvampVZWVjbDJNeXRTdGNVNFh6UjYvakZxeVhVME0KbUoxWjhTeTNXNUFMNHM0cU4vM1R5eGpiYTJPcDJxMW5FcENVNVByTER2RUZKNEpJZVIrRTE0cGZrK0VPMjg5VQpOVG1GQWRMajhvNGZwd3lVQUk2YlhicHVLV1Nmc3pNODZIVUNBd0VBQWFPQmp6Q0JqREFPQmdOVkhROEJBZjhFCkJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUMKTUFBd0h3WURWUjBqQkJnd0ZvQVV5a00yNjYrRkVEUkZsSTVqektxdXNtaGtEL3N3TEFZRFZSMFJCQ1V3STRJaApjbVZuYVhOMGNua3VaMmwwY0c5a0xuTjJZeTVqYkhWemRHVnlMbXh2WTJGc01BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUJDU09zK3kvVlBSV1FLMWRiSGhnM2tCSUlmbm0rbVRsZVNsVnlISmlGanY4dmlTd3VqQVkrTnVZTDcKMmRmbFZRRXhDSXVuTnhjc0p1M3p1SlcyWEgrRjZEU0VpQjl0TllLUXpQbXRwUlFDQ01PbzJTOGtrQjJ3cnpvbgpLaG5nakhYYmJaOGV5MmVmSGg0dWY1ZXEyTlMxN1FHM1luK3ltY1RpdDFKeVg4dngzWENOQ1lESHl0VmxUc1RCCkI3UEZNR2M5ZXVuc25OeUNZY3hjZ1BkUW5IZHR6Y3JPa3hBblpVN2tvYlJldGNJc0ZHR0dEYmZJeEx0endmaksKTXV4S3U0ZkZhUi9hM0FZaW5pWU1XRTNVSmlhZ25lZ1NFMkE1Sk8zMUtoRzdmNEVCZ0RTVEp0TVZOZTBvQTVtMApzYWV4NkZ4M09QUU9ndGs0SlcwQlA2eTNYSnR3Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  # Docker daemon needs this file to end with .cert
  tls.cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lRUVNxcm1XMFRONDY4eDdpSVJ0R2trakFOQmdrcWhraUc5dzBCQVFzRkFEQVcKTVJRd0VnWURWUVFERXd0M2MyUmhaVzF2YmkxallUQWVGdzB5TVRFeU1qTXlNRE0wTVRSYUZ3MHlNakV5TWpNeQpNRE0wTVRSYU1CRXhEekFOQmdOVkJBTVRCbWRwZEhCdlpEQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFOTHprb21FS1pXZFU2V1dSaXV4SGVsRVMyRm4yTHZSLzFSamt5dDI0eWFZMmh3UFpTRXMKRjFsMFF2RG96WDdVWFJLbVpEMmRWQUphN3FneDZiN21sK3hyWHF1LzR0T3B3aE43SVVTd09ZcDNNZlNub01xUgpvcUxqaDZibmxTUkVEcTBReDh5L1M4bVZraXhaWUE5U1pPTDVNNmlkeUJITjlKazA2NW5Bc05pMHZCYjkzM1NoClhoRTJ5aFlSYjZmcEFpdVhKVHhNS0l0b1YxZkdOc1RtQnAvampVZWVjbDJNeXRTdGNVNFh6UjYvakZxeVhVME0KbUoxWjhTeTNXNUFMNHM0cU4vM1R5eGpiYTJPcDJxMW5FcENVNVByTER2RUZKNEpJZVIrRTE0cGZrK0VPMjg5VQpOVG1GQWRMajhvNGZwd3lVQUk2YlhicHVLV1Nmc3pNODZIVUNBd0VBQWFPQmp6Q0JqREFPQmdOVkhROEJBZjhFCkJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUMKTUFBd0h3WURWUjBqQkJnd0ZvQVV5a00yNjYrRkVEUkZsSTVqektxdXNtaGtEL3N3TEFZRFZSMFJCQ1V3STRJaApjbVZuYVhOMGNua3VaMmwwY0c5a0xuTjJZeTVqYkhWemRHVnlMbXh2WTJGc01BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUJDU09zK3kvVlBSV1FLMWRiSGhnM2tCSUlmbm0rbVRsZVNsVnlISmlGanY4dmlTd3VqQVkrTnVZTDcKMmRmbFZRRXhDSXVuTnhjc0p1M3p1SlcyWEgrRjZEU0VpQjl0TllLUXpQbXRwUlFDQ01PbzJTOGtrQjJ3cnpvbgpLaG5nakhYYmJaOGV5MmVmSGg0dWY1ZXEyTlMxN1FHM1luK3ltY1RpdDFKeVg4dngzWENOQ1lESHl0VmxUc1RCCkI3UEZNR2M5ZXVuc25OeUNZY3hjZ1BkUW5IZHR6Y3JPa3hBblpVN2tvYlJldGNJc0ZHR0dEYmZJeEx0endmaksKTXV4S3U0ZkZhUi9hM0FZaW5pWU1XRTNVSmlhZ25lZ1NFMkE1Sk8zMUtoRzdmNEVCZ0RTVEp0TVZOZTBvQTVtMApzYWV4NkZ4M09QUU9ndGs0SlcwQlA2eTNYSnR3Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
---
# Source: gitpod/templates/db-password-secret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.


apiVersion: v1
kind: Secret
metadata:
  name: db-password
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
type: Opaque
data:
  mysql-root-password: "dGVzdA=="
---
# Source: gitpod/templates/messagebus-erlang-cookie.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: Secret
metadata:
  name: messagebus-erlang-cookie
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
type: Opaque
stringData:
  rabbitmq-erlang-cookie: lxNRaRsbFdeU83KoPJ13
---
# Source: gitpod/templates/messagebus-secret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: Secret
metadata:
  name: messagebus-certificates-secret-core
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
type: Opaque
data:
  ca.crt:  "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZkVENDQTEyZ0F3SUJBZ0lVRko4ZlFiMHdqUGpFRkdPQ2VWUHljVEtuVmdBd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1NqRUxNQWtHQTFVRUJoTUNRVlV4RXpBUkJnTlZCQWdNQ2xOdmJXVXRVM1JoZEdVeEZUQVRCZ05WQkFvTQpERlI1Y0dWR2IzZ2dSMjFpU0RFUE1BMEdBMVVFQ3d3R1IybDBjRzlrTUI0WERURTVNRFV5T0RBNU5UZzBORm9YCkRUSTVNRFV5TlRBNU5UZzBORm93U2pFTE1Ba0dBMVVFQmhNQ1FWVXhFekFSQmdOVkJBZ01DbE52YldVdFUzUmgKZEdVeEZUQVRCZ05WQkFvTURGUjVjR1ZHYjNnZ1IyMWlTREVQTUEwR0ExVUVDd3dHUjJsMGNHOWtNSUlDSWpBTgpCZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUFzbzBWY05vcE5jZXdtQjdZZGdJS0VoTHo4a3BmCldaMyttNUVndmlZS2tmKzQ1dDYreWg1cERKRHprT2Y1QWN6UHZKRTRYdlFoK0w1a0puNnBLaXpMYkYzVTdHSDcKVXJld2FTS3FGRnM0S2xjYkFJMHBtbnFLbHdKQzR3ZzI0MVVyQ2VzbUpEWHk2Q25vZzlhOHVvbUd2Y3N3dWRRZQpUNlhMSURNNFFyYUhUVWo1WUdwc0lwVUY1bm1ma2VjL3NDcHU5TGNVWlVwMy84TXBVSjlDZmxqSHpVakR0aWxuCjdBaUhVb0FGVDlDVUJQbWpiTURQODBpK2VIc2FLTFovWlVsWUJhbXJmcHl6UVIvUU5iQjA2dVRTUWV2emVGMUsKQWg0VXgxK0NVb0huKzdId2gxaFhCR3BUNHowWm1RbWwwSXVYRm1hTGYvaTZJWWVhL0szSnhUNDlPM0hXQmVXdApORkxlc1FKdXFSZ01zaHAzbVB0ZEExam0xZVNxVmE4eTIrRGh2UVhVYk5nL3BJdEdMNnNNdUxoTDJaKzZaRUppCkZxM1J3djJFR0wwa0h6a3dCbGhxUUVlbGZpWENsOElmR1VMU2tvVk9GU1hNanE0L2Vwamh1bnBRNTlWeXZZQlgKYURmMnQwdFRZa2RqTk1RaDh2RDJoMGp4dmVncE02VmxPSUJtTFRzZ0dzeERpTk1mWURhMjErWFBXTDJXQ2wvOApNL1AzZEhsKzU4UFl5eGhPL1Uwa2RBMW81ck1YT1NtMzVPTjBzMWtDY1FyTFg1eHY4OVJ1STB6L2lLZXVyTmFJCnVDN21Tb3lISGo3YVVENEUrdVVOa3Q4WTdHbnAxWW1hWjEreVZ6QkpQSCtweTN3ekd5aGtpYjlIcUhhSWxqNy8KaTZHTUorRlhjQUpEdXpjQ0F3RUFBYU5UTUZFd0hRWURWUjBPQkJZRUZGT2huNWFWZ2crV014YTBhM2owVDYvdQoyeUk1TUI4R0ExVWRJd1FZTUJhQUZGT2huNWFWZ2crV014YTBhM2owVDYvdTJ5STVNQThHQTFVZEV3RUIvd1FGCk1BTUJBZjh3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUYveG5qVTg4TzdBVFpMblY1Q1IvVWZiL1pWaE1mMzYKQXVGL1MrSktMWkZ2WGlabm1oMjlEa1EyNU5SWTN1V1JlT2RKMVZFN0tjeE9sZ2t1LysyZWt4ek5qTDlVNWZnegpRbVpQbFNTS05ZVHdCKy9PQXNYbG9YdTM3OFIzUSs0RENtTk5zazF5K3N2R2hIbkJNYjdLdHZUSXZlZjI0bTJvCnlRaUdPVGxWUmlRbTQ1VUNnQUNwek5xTllXalViQXlVM0d6dkF2b1RUbTJCN1VFbENncGdVQ2lXYWhTY013ZVgKSm9sSjY5UHkzcXdrcnZjOWZmZWd0dnk2clhSZkZTZ3k3QWw2NVJvNEVBOFVXNlRjSUdoV1RuWkJMQWFRSHVjNgo2T01BQ21yalN4SDAwcnhiUmdzcy9teHBqT2hNYmk1eExwblNrY0FWcDRmR3dRbUFQY0NzMHF3bUhjVEVyK0JsCkM5ZDNTUkxBZlB0c2hscGV4Vzl0MnEyZmVqVFFVVnJHY1ppSmlabnJyOVJ1Z2VMUlgveWxKOERDVklsQjJBREIKMTllRDArcGw2Ri9sQ09uUXJpazJlRjNVU01GY0tiNXlxYkZ3clN2b2E4QlZyc0pVdFdTS2RRWlhaZnBvSzZDbApoWGlvMkxKL3U1RE42R29HU1BXbk5nVHJoVHV2WGJlUk8yeG1KMHB4NERnck9jcENMdk5wdVRXRmVsdW9rR3pECmcwelMvNjNNZW1JWHVEemFxZ3ZONkZqQ1NNMnhYWExxNUJROHFDeWxpZE5EUTBSeko0ekd1cVp5RW0ydzNSRTEKWFgwQzQ1NzFUemJsUkZzbGdFV3B5a0pWcmFsTXVBc2tEVVR3U2xEZjRwTitWMmFzODVSY290YWs5dkF2d25rWgpCbWl5bDdVWGpzRE8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZNekNDQXhzQ0ZHamhiNWlQMWJNSWNtdCtBSWU4L0tzL2c5OTVNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1Fb3gKQ3pBSkJnTlZCQVlUQWtGVk1STXdFUVlEVlFRSURBcFRiMjFsTFZOMFlYUmxNUlV3RXdZRFZRUUtEQXhVZVhCbApSbTk0SUVkdFlrZ3hEekFOQmdOVkJBc01Ca2RwZEhCdlpEQWVGdzB4T1RBMU1qZ3hNVEV6TkRGYUZ3MHlPVEExCk1qVXhNVEV6TkRGYU1HSXhDekFKQmdOVkJBWVRBa0ZWTVJNd0VRWURWUVFJREFwVGIyMWxMVk4wWVhSbE1SVXcKRXdZRFZRUUtEQXhVZVhCbFJtOTRJRWR0WWtneER6QU5CZ05WQkFzTUJrZHBkSEJ2WkRFV01CUUdBMVVFQXd3TgpiWE5uWW5WekxXTnNhV1Z1ZERDQ0FpSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBT3BUCkxDY0dTb1JDRDk1TkV2RDlhZDAxRzQzbXdMemZkdkUrNVVrN04xcEV1L2JLaFFINUlwRHh6VkVhTDZEdnNHYWoKeUFzZ2ppT3ZUTTFTOTFOMGU3d2c2WS9oZmZXWksvOWd0ejBwTXI3MHo2QllKSXFQeldHWDVscjUxV0NlVWNVUgpjV0dNVWIxcmRwbVF0WFFhbU5jWFpFTGxzNzBsRGZSUEd4L3BhVU5pcjhaVU5hUjIraDN5RVpSYUI2dE9yRGE4ClpnemFjakZEcEZvMTRBeGlBOGhFZUlFdFpnbUI0TzhTZTZWSk92U3lPL3lnWmVlNEhuYU5vT2x5eEEzdXNFdUcKQUgvaHY4aWpyeGRBbkd4Mm5QRDhpZWxrUTFjbnl5dE83YzI5WXZiS1BWV2tQZUczd3VMSXh0b1Baam9SYVVidwpvb2w2Ui9VUU9UdmlGQmQzbDNOQ21UQkZJZ3ZqS3BPbnA4WDZVazZwdmVEVHZ0WFprZFNsaFVqeXd5cDJrV2pvCkYyTGFKYXhuak1sYktBUHNvOHljaGQyTE1WSHF0T0swS29SdVNvK0Q1TElUbUF4VTY0RFVCVzcrRXA3RGFxM2UKU2cwUm1HUWtxNk5WYjlCZ1hRbjV0b1NoV3JGTzk3QmxvSVFUQVpvQ2dhcjlrRTlvNDc4eXJJejZDWlpXOENRcgo0YUhvT0J3SjlIUkRKY0NrVnU5di9EWm5jRUZxaGNmMVpDeURGemhZaFRzekIzVjRLMDlqellzZzQzeU1UUEdiClUzbWxBZVIrVy9vazRmZmZFa2JCYXdZclI5NU5WNXpzbGVFN2E1Z1poQzRJd1p2c1RyWnJkUjYwM21DRVJmbzYKU1ZxRmJRdks1dG8ydHhST3daZEZEa1JmbFFEMUZHWTRrVmxoZXNwTEFnTUJBQUV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dJQkFEdEMxOHNQaFpQVzRDSjB3Mkx1K1N2b0tnN0hxZ1RKNVNaMWFJYVpUK21JR2NoZ0hMU05wN3BhCkNaUFU0YTArMGxwd0l3M3F5NUV2YnpucGYxcitrUVJLK1UwQkw0KzE3SGh4cmZCNDFIcU5meXUwY1UwR0dqMy8KV29xSXJCN0I4eXhZOEpES0pPREs1UllFa0dqYWRwZGNKMytTVDErMXNMMEtITVBLMlBjVXpTbGxWNVVuOU1vNAoxOGhyZm5IVlNsMnZ3RnZSeVgzTHZ4ZzdCdTRUWnJLelZ4NVZQK29IdmFJRXRFMW9SNkM0RlpteStHZDJZRnZ0CmcxRVNVVjZ4a20xWHhQeElhclc5bytzVk9ESG8zbnp3MGhEcDZXVCsxbCt3bVpKR09IenhWVHZFU29VMFo1ZDgKdWdtelNyVGFlaW9BMTF0eERrN0N5RmJoQTJPek1GR0p2eGN6cUkzMHZ3WVVDK3YrbVZCcWw4WFBjR24wNyt1KwpRTnBMZWJRWmszTDRsQ2ZPT0lYQVNxK2FvYURBdnV6eW5OSU1ueXAvL0dKU05tczdhNTRtcnB5T2pEdjNLNFYwCmlsQTB0eHlieXpkWWtGTFZNSlI0RHFzd3Fhakd0eGMzYjRUNzRjL1pUWVhSWkVkNTh1SmlWOUpMYjVNR01tc2MKWWFiN28wNlpORDAzeDgrRGN1MUFMZ2JhTFBWeTliM3lOKzk4UENhTkpWYWZwc05TSkN5VjZCM21uYTFuOHZXZApiK1FrRFNiUkh5ZGRjWnhBR0swTjdpeGRPN1hzNFNoeVZCZXpVQmJ2eDFna2d5YTZCWVoyZHVXbzR2OEpPamlHClQzM1ZWWkVUUFdZWHFyelhxQmpSYVQzRkxFWER6QmYzKzljaGxLYUpaaFNBRmtkcmgwVjIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key:  "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBNmxNc0p3WktoRUlQM2swUzhQMXAzVFViamViQXZOOTI4VDdsU1RzM1drUzc5c3FGCkFma2lrUEhOVVJvdm9PK3dacVBJQ3lDT0k2OU16VkwzVTNSN3ZDRHBqK0Y5OVprci8yQzNQU2t5dnZUUG9GZ2sKaW8vTllaZm1Xdm5WWUo1UnhSRnhZWXhSdld0Mm1aQzFkQnFZMXhka1F1V3p2U1VOOUU4YkgrbHBRMkt2eGxRMQpwSGI2SGZJUmxGb0hxMDZzTnJ4bUROcHlNVU9rV2pYZ0RHSUR5RVI0Z1MxbUNZSGc3eEo3cFVrNjlMSTcvS0JsCjU3Z2VkbzJnNlhMRURlNndTNFlBZitHL3lLT3ZGMENjYkhhYzhQeUo2V1JEVnlmTEswN3R6YjFpOXNvOVZhUTkKNGJmQzRzakcyZzltT2hGcFJ2Q2lpWHBIOVJBNU8rSVVGM2VYYzBLWk1FVWlDK01xazZlbnhmcFNUcW05NE5PKwoxZG1SMUtXRlNQTERLbmFSYU9nWFl0b2xyR2VNeVZzb0EreWp6SnlGM1lzeFVlcTA0clFxaEc1S2o0UGtzaE9ZCkRGVHJnTlFGYnY0U25zTnFyZDVLRFJHWVpDU3JvMVZ2MEdCZENmbTJoS0Zhc1U3M3NHV2doQk1CbWdLQnF2MlEKVDJqanZ6S3NqUG9KbGxid0pDdmhvZWc0SEFuMGRFTWx3S1JXNzIvOE5tZHdRV3FGeC9Wa0xJTVhPRmlGT3pNSApkWGdyVDJQTml5RGpmSXhNOFp0VGVhVUI1SDViK2lUaDk5OFNSc0ZyQml0SDNrMVhuT3lWNFR0cm1CbUVMZ2pCCm0reE90bXQxSHJUZVlJUkYranBKV29WdEM4cm0yamEzRkU3QmwwVU9SRitWQVBVVVpqaVJXV0Y2eWtzQ0F3RUEKQVFLQ0FnRUF0QnBoWVUxUWtQOUZ1eE42YjRnWGlsSjdiMEhnK2txMzNReitwcDdCR0x5anpEZzBxeU9XRWRvSQplVUdyUWdONGppdHNZa0VQZnhZSjdmYks2bllwZEp2SGFUTmo0UlZ0MzhleWoydk8rVDZwSnhFWVpQZktZQ3lrCmZXQnhST1hxNjVGUW1DMkYxaFYyL3VsZXpuSnk3eituYkZPcEpzUUlTYk5Ub2QrQmJLMjVkTExjMkNBcWRrSE0KaVQzNWp3M1ZCKzBlY3RxajBvR3ZIVGN6a2REMEgwV2hhWWcvV1NkZWYrS3c3b1d1cnMwZmxqaWltc3ZGZmxHMQpVRGxKdjN1cVBTSXQyQnpuajR0ZjFIdHd2MTBibTQ0L1lnZ1NTamJuemMzSXNjM1M5dVRTNTdScGE4Z1dIc0U3Ck5mZUlGekd5dlRmUGRlTnEwMDA0OEhJQUIxbUFLVHFDdVdYSWRtWUMzcFJPSU5YZTVRY3N2M1N1S09UMFFhTjYKQU9zVXNvbTBOYmxJd1YyV3VnMTBZNGVWZ1ZTRDlvMFlyemdzK0Y1K2haZjBFd21qNllzRFdCQUVzaFQ5bXBnQgpVY3IvbmR4Mi9kc1pncDRQTGZtd3ZsUVkzdFRvYjYzVlRrUlJTYTBIVENPK09TQ09TaFhhVmFiM1VXMXNNME5oCnZpKytPMnFMc3pjNHlZQXdkYWFJWEo4RC90TVU5aHRzWnRYRWw0TFNDT1JSVzhrT25qaVZ1dDU4Rk9XRiszNW8KTTZ0eHE4V2RJOGxWUXpJcGdLUStsdEUwcDJwaWNVQ2o2SlAyRzVSUVhpV293cEZjRndDelk3MEtiNjhxejA5Qwppc21BdlNjTkE3cmdVZmhKZHhrRmRFY0pXTVlhbVZDdjFSb01yZExxV1IwUm5Cb1VCOEVDZ2dFQkFQbGNyNkc5CkdvanlJV3p5M3NSUTRrdkkySktNRGdTbG1sVDZEdUljUlZpZERQTWdaUnZ3c1BGdkVnUTBMRmdzckwyTERXZXgKU1FCM09yYks2WUU2eXkvaHZUME1qWFVrbCsvc3I5UW15enZjS1JkNE11MEJOYjlIeWZnV1BENDFVQlA1d0pCZAo0ZnZURTg1emhsdEliZEJpNDJZbmR2NUVUdlRHUW9keW1YenZHUlhrbmJPZ0E3NWZyaHRnZ0VWNjRTZHh6WFBMCkdLQndmZkt6Q1hES1FNTTkxWmV6R3ZzYmJYNWYzU0ltZmlQSkNiOWpMTHhkcDRVaEZTdnU3Y25WalJnMnRRTjUKNVJuTnVFOVNuVk1qSVhZQi8ybVYxR2pVN1U0TEdYZG5oaWRnZ1BBMzZLckRjcitoSEJ1N0JhSGY2RmJpYllJWQorUGV3T25LaXJkMHF2V01DZ2dFQkFQQ1FBM09DdVRaUVA0aWFVK056clM5VmxKamVPYTFnb3l2ME05YkVpK0hFCmQ3S3paNm9LVlpraFR6SVNKY3R5c3BRSUVOYzV4cUFySXVLQ3ZRZHB1YzJuZ0lVcVFLT2xhUGxzQmtXcHJCSXMKbFZCSk5yNGFxdDFXRU9zNmRmVGR6czNkekxLazRMd1liY2M5d2dTdzRxcDhFaUZnT1ZjWlUzL0NkcXpwTGw1VQpFOHJGbmUwd2grZThoV1FmbW5qbTNWbWYyR2M4dzhJcTIvL3FjWGViWVBpdnp1Tm1lRE4xRXVMekt3VEtGdWgxCnRZaHNQZjJKTlA3dEQzWHB0SkNWS0R2VWE0cjVsTGxza1FNZGlMQm4rSjNpdUp4MHkrcXhSVUNJWnN3c3JpRHEKWVJRTjdHNzJzQVh4aU1mVTdPbDhHbjVSRFZ0a1NiSEVkOWlwWFFJL3Ava0NnZ0VBWXRZUjV4R0ZDdkt0dlBrbQp3cmtzZU0xS3lnc3BJejVnUlg0M2wvZU1wT3JhenlMdjhIc2VKeFBYR0VOMXNCMUUrbnU2L0hhUWNOYlJOdEtHCmF1cGF6c2V5c2hmZm1hYS9jaUZtTDdpUXBWRkdHRDlVTUF4aXVVWkREMG9BNXNkS3ppQVg2eURMQ1gxSVJIUVYKdE9pb1hnaFVDWkZxNEsxQ2ZsSjIzQ2pZSFdUSGxKM2d3K21Ra2t4cVBmK3AxK0EwamVYVmdTZm13dkRUZXZicgpyd0Q3V21lUDJXanNNTXRXUXRqTVZWVGNlbUtjc25ja3JDU1MyWG1iWXFaNUtaNnpKZjNKRVcrbkZ1c3JPb1dNClJmK09xNjl2QlBLV0ZsY1BGL2ZlU0MySVJ1TkJOL1Z4Q3Y0YzVVZCtWSjkwUkF6emtqeDlHeXU2d3JIZStNRHkKR005djhRS0NBUUIwYSs0UHFCTkVzdCtjbDd2RGwwY1lZbDJSQWZOOThnZm1ETUJOeno4M1d5TG16Q1orUjVRWAprT1JJQWpwaVZMY1NKemtuUUNIZGdDTFk1cGJmRUk3SWRha2dTVXVSSjBzL2NzVXlUNlFrQTRtYm1tTXc2NjBICmcxQ2ExdWNoUTN1RGJEVlZ1Nis3dUVMZ3F3WEx5V05aU01ScGZLMGpkdkZQSW1qVzA5OEo3YnpLWkl0Q3NEc0YKcnRvTGs3UHBrU2xNNTZ3T2duem02bUVnWUhEYmhzb09jTjg2ZEd2MTAxSDVuZCtTNk03Zlg2QWtUdVpOWG1yVQplUndEWDhCd1BJK0ZMUStDNmJqTmFEcGgvSmdiYjZZRm15VG5LeXRKQU5QWUlHdEhvdFArd0ErTmFoT2p2Q1dDCkt0dWNnbkxKcUxNVnNObzdBYlVjb0UyMEFIc3Z6R2paQW9JQkFEaE52aUJlWmZNSUZuWjVvMzF3YVdsM0phQjMKTzFZcStiVXM0cmJjMnRvaVVGVTdyZTZuV211b202RzUwQmdBTmpnNzlwZGt2Q1ZUUkNYRi8wR3VDd081TVd5OQpNR2VuRHB3NllCc29Fa3Z4ZC9yc1hlN0kvNVFDV3lod0VSRFZtV0RONlZWdXJEbDNDVXJyVGIxNEd3dldaRktLCnd0Rzl4am9vZlJOc1U0Y09tQk1JdnhNK25UaTFKaFBrQXVlUk8wank0a2hEdkFPM0FIdGd2NWp2d0VOZXg1Qk8KN3l0T0FNcDkxeVVmQjB6bis5dXU5b1l0dDlIYmZxelJ2UmhSK3Y3bU90eGRtU1krM1FLbzFDdnlLSHZwYVB0VwpJRGNraUpFUmw1cjlldkhHd0dFWW8zQkl4aGxkTThsd3NFWFJHaTNDRjNUQnpzZVR0ZERaSGRCeHhmTT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
---
# Source: gitpod/templates/server-proxy-apikey-secret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: Secret
metadata:
  name: server-proxy-apikey
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
type: Opaque
data:
  apikey: ZkY3K2FDUHZGOVBhMEFFam1vWit5V1ZoNlBxQmpNNVZFQTB3eVFzM0ZIND0=
---
# Source: gitpod/templates/ws-daemon-tlssecret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: Secret
metadata:
  name: ws-daemon-tls
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
  annotations:
    checksum/checksd-config: 95443b916711c6e482d127d01e41f47ab2072c6e492944c9587d04f1cf25bd61
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHRENDQWdDZ0F3SUJBZ0lSQUpCSDJUcmVQSDl4VGtlWm1DNEszekF3RFFZSktvWklodmNOQVFFTEJRQXcKRmpFVU1CSUdBMVVFQXhNTGQzTmtZV1Z0YjI0dFkyRXdIaGNOTWpFeE1qSXpNakF6TkRFeldoY05Nakl4TWpJegpNakF6TkRFeldqQVdNUlF3RWdZRFZRUURFd3QzYzJSaFpXMXZiaTFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCCkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtSMnFUaHc1Wk0xUDAvelAyd0xwb2ljZmRyMHdQQlFxcUJlUEE2S1hYUEgKR2VZOUdoc0psVFNGOUVpSG82b1ZIcXRQT08xUjZjcnFXRE1mZUdsS3pTdG9mRUYyaW9Lc0xOZ0U5TzJhQmxsUApYSC9XWjJpeEZuZlpKaGRGb1JYaEN1cXc1VGhnRzgwWE55NWVldE8zV2VHWGJ1Uzh6ZWJOejFEQlR1d0xjNXpQCnlITHppc0VNOFEwS00rK2VqUTlKNEJXYmV1RWo5R0s3Zm9VQ0dRN0RubjhCdjJqV2c4Q3ZvOXN4emZqeGlKMlgKZk9qaUljRmF5NlFNNkg3cTEzbzZwQ2J2NnowL2krL2ZSZ2szT0lhcXgyb09WMDhTQXY5Ukx3V0FqdUJKdEsxTQp0R1hzeEZhSEZBb2JqVVJUZW00T2NlWGVvcm5IYlBQUUlObFRkWU1INGJzQ0F3RUFBYU5oTUY4d0RnWURWUjBQCkFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUIKQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJUVkJIcmJoaitzejJzTEdteTcyNjFycWdxUWN6QU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBRFVidTUxMnhHcUUydFNLa3ZwOUV4UUZHbG1VR2VUcVk5aUgrMzVpNDdQL3ljK0h5CnZUeEt4Yk9oUTlVMGZCODdvak9kLzZYY0pVR3c4NjRFMXN2TFpRMXJ6TzBsNk5NdkIvWVMxSVg2M3Awb0lDQWIKNHZXaHg1cU5FQk9TclVieDMzM3hjTDJZMmo2Z0d5R2VqUDNCV05sR09peGFJNFNyTWNkS1pnbG84Q0VtbHF0eQpIS0hycDNoT00rUXdpci9RYk05VWtjZlk3MXZBVnVDNTA2bVYwWXNMSTdUUjBRSHNIQlp3cDhydWVvbk1KemNIClFiaUc0akxIMXV1ckRFV0hRRFdaN0hzNjg3QTRYV3R1Y2lFWVp6Z1l3OUlxRHlCbWh5M1N0aVcvRG94elNxa2QKZ1hMdEpFRXBRcnVZQnVnN09CTkE1Tm54S3ptNmwxa3VXOFhkc1E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUakNDQWphZ0F3SUJBZ0lSQUxtUzdoYi9Tb0V6ZiszbDJ1RElVNHd3RFFZSktvWklodmNOQVFFTEJRQXcKRmpFVU1CSUdBMVVFQXhNTGQzTmtZV1Z0YjI0dFkyRXdIaGNOTWpFeE1qSXpNakF6TkRFeldoY05Nakl4TWpJegpNakF6TkRFeldqQVJNUTh3RFFZRFZRUURFd1puYVhSd2IyUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGgrNFhjaHBUaTduUTFVZ1FsYzBub1Q0WURWUjQ4d3gwd0hCcDNjMEdUWmdRQjI1TFkKNERBaENvTU9WTTlMK05LaGxkQkl6dlNERzZHUjl0NHlXODNveXY0RE9IdmtLSm1oeXd1d2x1cHVpV1JmcExJcwphUDBjdnJhN1dJU3VwajNjZkFXQVhCeU5QR2tIY0ZxWVZ2THNUbE5sOFVHN2ZnWVVBUmtLTVhwdjhhdVRYelBqCjdrTXJmclF3aXdVZEQyTFBMNU9IelIvWTZCTXV2N0dxR0NQd1lzRWVuR1d0Uzh6RUtObVpwcEF3TzhNU2t5SDEKQnZJeW9uZUFOZVcybzNHTkVNSFVKT1pIM2NmQ1VOck5VZFNuQTVidVdmWDlwWnBJZjZER2JySXppMjFQZ0xqVwpEQm0xRE1kMDFJR0EwUGVMS0cxaE1NUEcvNlFJc251ZXdmS3RBZ01CQUFHamdac3dnWmd3RGdZRFZSMFBBUUgvCkJBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEUKQWpBQU1COEdBMVVkSXdRWU1CYUFGTlVFZXR1R1A2elBhd3NhYkx2YnJXdXFDcEJ6TURnR0ExVWRFUVF4TUMrQwpEV2RwZEhCdlpDNW5hWFJ3YjJTQ0ZIZHpMV1JoWlcxdmJpNW5hWFJ3YjJRdWMzWmpnZ2gzYzJSaFpXMXZiakFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUM0S3lBN0VNR3dCY1JoZzVPbzNud0d6LzhmdXYzVy9BRTB6cytZWDcKdVIvaUxQNVZkY0tWZm1QalQvMEorbThHMW1Jb25xamlFTG5VQTJRSmt4QTVhdHlZTm11dXB1R1FvVnpyamJlYQpEK0Nxb2Vtdk43RXV3Sm5yTzBvSmh6MTNQYXFjSEFMZkdvSEFtTUd6VzRxTXNGcmRqQW4rVmxlbi94STg4WmpHCnFNRHl6VVhVOHlUbUR1NEI0WmEwc1F3SFpQYXRIZWdJSHZjckEyRzd4clJSK0V4NHBSb0FaVDNoWko4VTZjWFkKZ3M5YjhDK1FWSnNIV1NhM0t3ZDJyVFJmWjNSeFo0RGpvM1R5M2NLQTV2OXFXYkRVc3dnWGtZSVVRME91dzEzdworTndsWHlmV1J0YmpoRXREenY2bDJId0hxODdTWThnM3dYVGk3YTBxejVBYTFBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNGZ1RjNJYVU0dTUwTlZJRUpYTko2RStHQTFVZVBNTWRNQndhZDNOQmsyWUVBZHVTCjJPQXdJUXFERGxUUFMvalNvWlhRU003MGd4dWhrZmJlTWx2TjZNcitBemg3NUNpWm9jc0xzSmJxYm9sa1g2U3kKTEdqOUhMNjJ1MWlFcnFZOTNId0ZnRndjalR4cEIzQmFtRmJ5N0U1VFpmRkJ1MzRHRkFFWkNqRjZiL0dyazE4ego0KzVESzM2ME1Jc0ZIUTlpenkrVGg4MGYyT2dUTHIreHFoZ2o4R0xCSHB4bHJVdk14Q2pabWFhUU1EdkRFcE1oCjlRYnlNcUozZ0RYbHRxTnhqUkRCMUNUbVI5M0h3bERhelZIVXB3T1c3bG4xL2FXYVNIK2d4bTZ5TTR0dFQ0QzQKMWd3WnRRekhkTlNCZ05EM2l5aHRZVEREeHYra0NMSjduc0h5clFJREFRQUJBb0lCQUdoeXk4MUF1d0lrZXJ2RwpXN28vampKOHh4RTFQMU9RVHlaVVp2czgzMXRVZEplek9DMWJlWU5jQzNVTlIvN3lVOUJ4b1NKMTNWZlg1cGJECmhyRzU4dk1kRjhpL1M2d0tBL0JmRzlrVDkrajlRZEpmR2ljaW81S3NwMkx5SitsZFZ3eFltbVpZcksydTlWQ0YKNHFtMHpuVGdRdlhFUzhCd0lEa1F4TlVNUjI0RFk2Y3ZtQ1JGeWNPSkl4Z3RVd3RMV1RBNml1YWdCdG52bDc4cgp5OVBiWlJUcldmb2o5bndyeUNIU05Ba2wranY5YUlQdmk3ZkVkNksxbThHR2kzSTZnNWVUNWRqZVBmNGpZakpNCkszVDhodG9yNm5oV3hUWFBnbDJ1bmd5dkR3aitpeDZMTzRQK24vMWpncFBtaDNvWWJsUnQ3TUs0T1llbmJzNmQKc1RtVGFJRUNnWUVBLy92bTA1ZndnWS9VU3ZiZ1krUFlPd2pIaEdkbi9nWkFSeE1WVCtsd1N2YzZNSmtNZnlndwplRkV5OGxTbWV5Q2l6WHVMOUJDWTZ5M0YyeXU3WEsvcWlDbnQzZVErekpJZUU4eXZzL2lFdkVSYmczZ01WSythClBleEtQWGFSYVI0dHJlb2pEWll2K0hWS280aTJPYXlFWWkxdDhHWTJ0djJ2ZXk2NldWQ3FxZzBDZ1lFQTRmOGsKRWpVYkJlUnNtZGZmVW5YSWNtM3VkK1dHQlZFWHFZQnpxdlBpeWE2ZlRwU0JMbTV3SHFqWDgvZ005WHArUmkzZQpDRlR6RnpHQ0dlWXJSUzVDRWZwMEkxdXBTMHAwcVJvcFgybG84SW92ZkpZY3MxZjF6dThBRWhNekhJSzBkMDRmCkoxMDMvTi9Tb3owUWdHNWlrZjdHZk01UHZITGwrUXpYbXlnN1l5RUNnWUVBbFBjSWVyWCt0Y2IzYWJDRklGd2wKSnlXU3hkQlBTaHBsS1hkSGZidUJKMzc3ay9CY3YxcXA2anFHaFZNUmxyR0ZURUxMVFBxam9xaCtiVzdqbDZxZgp0eUYvVlJOUUlFZ2Z6TEhleGNLbnE4K3oyYXZ3c1ErSG1PVjZ4bzNMVFByTTVscE1qOG1JblBQVXZabi9RVXpOCnRUeHVyK2tyaWczVElzSXNtM0UvLzdrQ2dZRUFtNkFnN05EWkhRT2hyWWMwYUFwbjBEVFhoSVR2OTNWU1FBME8KbWVoOGdibllSanFKZ3JuV1I2YXBuMzF2SHhRTkpMS3ROVHVhY3B4TEpSNlZLWHlqVHRJVGE4M1JGT0hlMkJ3Rgo1WWduRlkxekNlNHRNV3NmQURNZzcxRjlYdUs2OTNVNml0YnNtUnhnWnJ6RVFrekJZQnY3L3pIclFyQTBvWDR3CmNzNFBwMEVDZ1lCZ1NGN0VhRmMvb1VyL0doU2lESng2TlkxdDBiY3l5SFUwUzJoODhRbFZDNlBCKzA0QkhjUGsKZkpQbHF5VkoxRG5HVG1MSkplZTZUaEtmZW81QVU4OHNXRHpWOG1ydDM2MHZDL2JkOGxXR24xSjZJbGNjNlBHTQpQYTFOZVIrUzd3MFJpK3JBTkRtaDFXWFNOc0RzY2F3L3g1RXJCam1EMzVyTWRvbXk5SGlRQ0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: gitpod/templates/ws-manager-tlssecret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.




apiVersion: v1
kind: Secret
metadata:
  name: "ws-manager-tls"
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
  annotations:
    checksum/checksd-config: 39ce995e66b66c38ceddae9c1a10c1a2ca31a1906d254e867cba9983d1f803a8
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHakNDQWdLZ0F3SUJBZ0lSQUtYLzlWR3dVMHpTbTNzMmtQc3N6K0F3RFFZSktvWklodmNOQVFFTEJRQXcKRnpFVk1CTUdBMVVFQXhNTWQzTnRZVzVoWjJWeUxXTmhNQjRYRFRJeE1USXlNekl3TXpReE1sb1hEVEl5TVRJeQpNekl3TXpReE1sb3dGekVWTUJNR0ExVUVBeE1NZDNOdFlXNWhaMlZ5TFdOaE1JSUJJakFOQmdrcWhraUc5dzBCCkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVJMWUvTVhKRTQxMThxdEVUU053TlJ0U1E5eWpTTDE4dTVmcWNMdVYKUnd2RlRtTjR5TlBCSzhCRU9XeDlRbzNQNXVVN2o1aE9ZWU5TcEk4d0JtcmtJL01zQjBjbisyM1F5amdQN3ZoOApvSzRQMHZ2bHp6UnNKZWl1b1J5NmFJc0taQlByem41U2lETytRWUVtK2RoZzRZNTV5RmRWWExwR2ZqMzRCNUFKClNScGY0U0ZWQjFvYWZ0dnB6Wk1RNmQ0bmVzV0lXcGlxZmtTeElCWnVMMzRhMVNuTWZwU0l6Q0FnTUdpMFRXNlgKZUJEMG4vbmxkSlYzRHpQUVp0OFN2TWh6ak45WDcwdXZhZWJtc2J6cG9ocEdhMHlDTmVQMUdnM3VyZlBUdWhJUwpMOCtiTVdVS3o2RTRZYjMvRzRaM0xMeGRWK3ZjRmpyelpuN2JBZGJzS3RWM1JRSURBUUFCbzJFd1h6QU9CZ05WCkhROEJBZjhFQkFNQ0FxUXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUE4R0ExVWQKRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZIeWZlbGEycDZ0UllTVGJqVlBKM2pQQTlmbmJNQTBHQ1NxRwpTSWIzRFFFQkN3VUFBNElCQVFDRXVPcUlHRlhFZm55eXpCU2ZLNVJ1NWllaXdyRzRINFNUdy81TG9sc08wQm1wCkZFNkNNTDZhMk1KZUhnbkRmUkhFVSs0NVdKcW5ITG1nbUtwb0s3djRUTThlSGxiYVJ5eVpBbG5INE5FWmFLZVYKTTgxRkU4ZnVoQVFQb1JSTGt1Y1BtbmIxRm1sZHdhZlNzbnRneEEzdzBKalVINVR1N1lKNGZuNmRNNHZ5Z1BsSwpHREtERlBuZFg3cWJydDl6bTJFL3VySzREQnFMeWVzTnNSd3dHZHg1cnRQNkZlS1Vla1FkbnRZK3hZRjYrMXNoCnJGeVlRbWJPRmNqQXlkUzU1Z0dGTHhGM0RTNXVNem9oNSsxRys0OS9SdDY2NmxVcXJQQzZ2ckhlclpXZjJ6MncKRWNHK0hZY2U2WE1Ba3R3VkFmSTdjMTdvUWFRTG9BaTB5R05oUisvYwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZVENDQWttZ0F3SUJBZ0lRU1FHV1BoOVZwYlJKS003MjlSM1lmVEFOQmdrcWhraUc5dzBCQVFzRkFEQVgKTVJVd0V3WURWUVFERXd4M2MyMWhibUZuWlhJdFkyRXdIaGNOTWpFeE1qSXpNakF6TkRFeVdoY05Nakl4TWpJegpNakF6TkRFeVdqQVJNUTh3RFFZRFZRUURFd1puYVhSd2IyUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRFM1dzhXc292clN4dVRNY0p1L0g2S2hpRFBGTzBudkJ3OUpxWVI3SjIxL1FqYWdqekEKaXoxZ2F4WjF1ZUVYRmRwRk13NVNSajN0U0hUZGxJYzMzY29BQzUrRXVRVlBRSzZNVTBoLzlzSDBldHE1UXgydwpSU043cEwwTnFvd2c0N25EbmxDU0QrdDIrd2hNek9uamJTWHpTREY5bjBaVFZxdHRBWXV4VkFXWjZRN2NQSkp1ClRWa2VaZ1FETFRmekZ5V2RWeGtvb1pDWldjNlJhd2MyVEMyeHVwMXdwQ25yNnZsa2hIOExoNGxTT3BJa0tuRGMKbXhJcWRWeHVEQjhSQVcrTmt5bHI2MkNIUTdLY2JDSzNhd1ZYcWJadC9QaWM4UHBxSEhUQTJzRW8wUDk1WStxcwpYcnNiNElxV0JNNzBiamhweXM1a0pYcU9rUDZSaUVZencrVmJBZ01CQUFHamdhNHdnYXN3RGdZRFZSMFBBUUgvCkJBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEUKQWpBQU1COEdBMVVkSXdRWU1CYUFGSHlmZWxhMnA2dFJZU1RialZQSjNqUEE5Zm5iTUVzR0ExVWRFUVJFTUVLQwpEV2RwZEhCdlpDNW5hWFJ3YjJTQ0ZYZHpMVzFoYm1GblpYSXVaMmwwY0c5a0xuTjJZNElLZDNNdGJXRnVZV2RsCmNvSU9kM010YldGdVlXZGxjaTFrWlhZd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEdnZ1TU1CNzRpL01uTkEKQVd5NkZrVys2b2hMRWFtdWVHdVRySTUzYmZmMDg3RWcweEsrMmNpSDdBRC8ySG8vYlRFT05FTDhoZE9ycEZvcwpOZkdnLzlPVzg5WE5hblU0ZmdDVlcrUTdUT3RYeE12YTVJMnZSSklPOXYrc242b3BPQmhrdlgxaEUyaC9mdmROCjhFYVdSU24yU1lGUE51RWdKSXJHS3pYbjZmN1F1N2lOU1kxV1o2WXJQUzhxZG9kUmJ2bzlqd0owY3Q5RTNvdVkKUlhmU0M1YzVYZkUvakM1M2hTU3d5blBOZjJ2SW5vUDBoWXJ1RVI3c3JheHZPUjFiN25Ma1p3eDJrN3dyNFFmcwowYlFTQThqTlAyQ040Wm00MmMwWUxwNVNhbG1iMSsxT2ljb1FDVkxkajZwNE5UNHgzczc5b0xKRFlZMFg3OGZPCm5idmhmdkk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMHVjUEZyS0w2MHNia3pIQ2J2eCtpb1lnenhUdEo3d2NQU2FtRWV5ZHRmMEkyb0k4CndJczlZR3NXZGJuaEZ4WGFSVE1PVWtZOTdVaDAzWlNITjkzS0FBdWZoTGtGVDBDdWpGTklmL2JCOUhyYXVVTWQKc0VVamU2UzlEYXFNSU9PNXc1NVFrZy9yZHZzSVRNenA0MjBsODBneGZaOUdVMWFyYlFHTHNWUUZtZWtPM0R5UwpiazFaSG1ZRUF5MDM4eGNsblZjWktLR1FtVm5Pa1dzSE5rd3RzYnFkY0tRcDYrcjVaSVIvQzRlSlVqcVNKQ3B3CjNKc1NLblZjYmd3ZkVRRnZqWk1wYSt0Z2gwT3luR3dpdDJzRlY2bTJiZno0blBENmFoeDB3TnJCS05EL2VXUHEKckY2N0crQ0tsZ1RPOUc0NGFjck9aQ1Y2anBEK2tZaEdNOFBsV3dJREFRQUJBb0lCQVFDa2N5TGkwZW9rV0haeAoraFRnTWVZQjRjQm5lS3ZMbGZSM0FsSHdIQTZGdjM1TjA4dkhYMHRHaVhvRDVpTEx1M0J0RVBpVDBzMnEzaHF5ClJJU0RYVitMVllUWEd1WTIrL3FlMUxudGZkMlM0dEQyTUkxUHl6bDF5ZWpZWlNuSzQ0Y1FMN3duaUY1VWNqM3cKbEwrelpJSjVCc3dBWmxlUjJEem5USk0rZklPNWxBTWpzOHlVRFVlYXdhQjVoRnhyYUpDL2M2clpsT3Z5L3FXSApQQjRpcXdiUWFRNytGSlFzR0hTTEUwWFVxZWxiWWVkdk1PaW1obUZzN21EMGRzeVpuQjl6d09rcFVySHNPM2gyCmUwYnpEN0JMZVhKSXRkUSt1VEFIWUtHeHZMaEgrQjRENFNnN3dwNXk1VU1lQW9PbUsyYzkvcnI4ZGxrK3ZpMkIKUDY3Vi94K1JBb0dCQU5WeGZpajRBSDFLTHg4cGl4TDJiOFJyRkE3bDdNbGxiQjUzQ3UzWEFtVHJ1b2JqTFRzRgpHUVo3N1Q3Mk9Wd1ZnaDEyRTU1ZmhZblNvdXR5TWFIZTF2VmtSM3dVd2pmMm8rdTJaNThscTlhc0F4N3Zra25wCnYxb2JBOUdaNVhnSEJpS0xtVGNyVEhQZFB4ejNHYmdnQ3J5bGljcTN4aVczVmtCTjlmc1BWTzkvQW9HQkFQenoKNGJBbDdWWnNaa25ibFRybWFBU0NRMDhnU3B0MXBDb2dqeG9yZVNYRHBYOW9XSDVpQmRYQlRubjcvNHZOUGFnYQpYVnVuYTRSMWhSVjI0K1JIL256WTJZM1pXY1o0K00zS3ZKbGhIdHZRN0dMMlpWUFFNVE9lUEFKNUNINEtNZjJQCnRMTFJleVhpR3R4T1ovTXEvOGFLOGNTTDZlREllKy9QeUsxY3ByZ2xBb0dBQnFXdk1TVndGbmJOK3VGM1ZGTGEKYmpxTGVGOU92WUxzR0JMTEExY3oydUxBZjF6cDFyRzA4cysvTnJ2Q1U0elQ3WWowMlhUT0d0bTFlekdtUEExTgprbnphQVJKQWJpKy9NU01RSFJPMlEwdytHS09MWWNQbTBxNk9zdU5oRXhqYzV3eUQ3QVRzTDV1UFVKNmRiVytLCkJnLzl0NU43bDBjYlo0dEdBdGlhWTQ4Q2dZRUF5QTgzUzNMandIdWhkdjYxaTAwWnJaODlEd0xTSHh3dkI2YVMKcDdjRWJRck5CUFNKTVFQajY0aWt3Yk8rREZyNlRjNzBVWDRiZWpyY1UvcWhDVGFybnlCL0NFS0VUNFh6K2dkRApuT2VFV1lSbXdXcHcvNVhrcEJlZERMT2ZOTmhwYTByU05xK1pmMy9Sa0xadVhwTitrZy9vWVhQck9QNDNqNWE5CjkrY1VjUVVDZ1lFQXExZ2JickxXanoyb0JPYU1SZGhMb2NkZnczNXNxMUY3V1J5VkpTT0J4QXZML1oxZjQ1a3AKVDVxYjJFQmpoeEN2bGZWeXJWQWVhMXBmZ0p2QUtBSFZNczRSTzlNTFZYZkZzaWdEeXpSNTlkSXNrbHh0QnFJMgpVMU1YejFCTmgxNllsMWFxaW9IQTRCMzdmQ3dNUFovUmxLekRwUEROQU84dnlqUG5SMGZ0V3hBPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: gitpod/templates/ws-manager-tlssecret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "ws-manager-client-tls"
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
  annotations:
    checksum/checksd-config: 9ebfea2b013a2061984a99dc44ff33abdefc0e4173746033cdb59506168eec87
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHakNDQWdLZ0F3SUJBZ0lSQUtYLzlWR3dVMHpTbTNzMmtQc3N6K0F3RFFZSktvWklodmNOQVFFTEJRQXcKRnpFVk1CTUdBMVVFQXhNTWQzTnRZVzVoWjJWeUxXTmhNQjRYRFRJeE1USXlNekl3TXpReE1sb1hEVEl5TVRJeQpNekl3TXpReE1sb3dGekVWTUJNR0ExVUVBeE1NZDNOdFlXNWhaMlZ5TFdOaE1JSUJJakFOQmdrcWhraUc5dzBCCkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVJMWUvTVhKRTQxMThxdEVUU053TlJ0U1E5eWpTTDE4dTVmcWNMdVYKUnd2RlRtTjR5TlBCSzhCRU9XeDlRbzNQNXVVN2o1aE9ZWU5TcEk4d0JtcmtJL01zQjBjbisyM1F5amdQN3ZoOApvSzRQMHZ2bHp6UnNKZWl1b1J5NmFJc0taQlByem41U2lETytRWUVtK2RoZzRZNTV5RmRWWExwR2ZqMzRCNUFKClNScGY0U0ZWQjFvYWZ0dnB6Wk1RNmQ0bmVzV0lXcGlxZmtTeElCWnVMMzRhMVNuTWZwU0l6Q0FnTUdpMFRXNlgKZUJEMG4vbmxkSlYzRHpQUVp0OFN2TWh6ak45WDcwdXZhZWJtc2J6cG9ocEdhMHlDTmVQMUdnM3VyZlBUdWhJUwpMOCtiTVdVS3o2RTRZYjMvRzRaM0xMeGRWK3ZjRmpyelpuN2JBZGJzS3RWM1JRSURBUUFCbzJFd1h6QU9CZ05WCkhROEJBZjhFQkFNQ0FxUXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUE4R0ExVWQKRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZIeWZlbGEycDZ0UllTVGJqVlBKM2pQQTlmbmJNQTBHQ1NxRwpTSWIzRFFFQkN3VUFBNElCQVFDRXVPcUlHRlhFZm55eXpCU2ZLNVJ1NWllaXdyRzRINFNUdy81TG9sc08wQm1wCkZFNkNNTDZhMk1KZUhnbkRmUkhFVSs0NVdKcW5ITG1nbUtwb0s3djRUTThlSGxiYVJ5eVpBbG5INE5FWmFLZVYKTTgxRkU4ZnVoQVFQb1JSTGt1Y1BtbmIxRm1sZHdhZlNzbnRneEEzdzBKalVINVR1N1lKNGZuNmRNNHZ5Z1BsSwpHREtERlBuZFg3cWJydDl6bTJFL3VySzREQnFMeWVzTnNSd3dHZHg1cnRQNkZlS1Vla1FkbnRZK3hZRjYrMXNoCnJGeVlRbWJPRmNqQXlkUzU1Z0dGTHhGM0RTNXVNem9oNSsxRys0OS9SdDY2NmxVcXJQQzZ2ckhlclpXZjJ6MncKRWNHK0hZY2U2WE1Ba3R3VkFmSTdjMTdvUWFRTG9BaTB5R05oUisvYwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURjRENDQWxpZ0F3SUJBZ0lSQUwzUURNbU1Kb0pYMlhXUnNKK0tvdDR3RFFZSktvWklodmNOQVFFTEJRQXcKRnpFVk1CTUdBMVVFQXhNTWQzTnRZVzVoWjJWeUxXTmhNQjRYRFRJeE1USXlNekl3TXpReE0xb1hEVEl5TVRJeQpNekl3TXpReE0xb3dFVEVQTUEwR0ExVUVBeE1HWjJsMGNHOWtNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEzM2hHamhMUG9LZFF3VzlqNW45MVJQSG1YcURzQnZpdmdYNENRYzFTcElNemVnaWcKRk9DeVdNQUJ1OUErKzM2ZG0yMXc5cjMrd09ReDFnWktsWW5xWEtsZVZJT29uZ2syTnJoZjZxV2tXb0ttSXhPLwpzWm9pWUZGcFd5NjV2VkpKNzh2VGJmbVdXTkM3bHIzZDJ1bWJlVm5XM0dSY1NnWENSMXdWYUF2eStzMEQ1azB1CnZ2TUVYN2ZCQzJ2d2RUN0xRcEtzN2p4NkE5dEpyOWt6QVNpSjlsWWtWMzBFOVI2dWtONUNyMWNrYjY5aHBYaVAKNC9MeUxtMXZ4cFZNV1g5RnlabytQMnZnWU1SWUZuNnRhdTg4NjdSRENxMTZjM21ic2V1dklsSDNNNWdkLzQxegpyMU5UMVRLa1FJQTE2Zis0N1c1YnZ2bTlEWm82VGhzbWcxN2FuUUlEQVFBQm80RzhNSUc1TUE0R0ExVWREd0VCCi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC8KQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlI4bjNwV3RxZXJVV0VrMjQxVHlkNHp3UFg1MnpCWkJnTlZIUkVFVWpCUQpnZzl5WldkcGMzUnllUzFtWVdOaFpHV0NCbk5sY25abGNvSVJkM010YldGdVlXZGxjaTFpY21sa1oyV0NESGR6CkxYTmphR1ZrZFd4bGNvSUlkM010Y0hKdmVIbUNDbmR6TFcxaGJtRm5aWEl3RFFZSktvWklodmNOQVFFTEJRQUQKZ2dFQkFLQU0wbHR5ZTBKSFVZUHZQUDMyS3dOVm8vTjhBS3IxZTRKRlk4N01seW1pZ1NScXZkaHZac2JtRzdyNAp4MmloL3puMTBWRTVyTS9HVzZkTmcweDBrdDl2THpBVVhSd1JHZGsvelgwNmtqVUxHc3gxMC9ndlo0Y1ZMZzJVCjFMais2VjV6NlRUN2VEOFJIY1lMNjRHT2pCeWVGOEVQWDYxUkwxUTAxcG4zNUp0N1Jrd1A4dndVYzU5WUVHNGwKWUZETnR0WExPWFl2Tlg3Mnk2RlJlMTNzS1I4S0NVT3NaZkIxbFlrZ2UvVG1NZW1DTk1yVitvM1RRZG1XRzZzVgp2QkpvR1FENnZZSm1kb0xQb1JWaThoZ2VmV2VxcUVIVmdKU0ZNemNCRzN4ZEZYbk1pa2lVN0NMRmYzZFk1VGxXCi83NFBEekFyQzhkQkR5MXVYWm4yeTFKZlVnTT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMzNoR2poTFBvS2RRd1c5ajVuOTFSUEhtWHFEc0J2aXZnWDRDUWMxU3BJTXplZ2lnCkZPQ3lXTUFCdTlBKyszNmRtMjF3OXIzK3dPUXgxZ1pLbFlucVhLbGVWSU9vbmdrMk5yaGY2cVdrV29LbUl4Ty8Kc1pvaVlGRnBXeTY1dlZKSjc4dlRiZm1XV05DN2xyM2QydW1iZVZuVzNHUmNTZ1hDUjF3VmFBdnkrczBENWswdQp2dk1FWDdmQkMydndkVDdMUXBLczdqeDZBOXRKcjlrekFTaUo5bFlrVjMwRTlSNnVrTjVDcjFja2I2OWhwWGlQCjQvTHlMbTF2eHBWTVdYOUZ5Wm8rUDJ2Z1lNUllGbjZ0YXU4ODY3UkRDcTE2YzNtYnNldXZJbEgzTTVnZC80MXoKcjFOVDFUS2tRSUExNmYrNDdXNWJ2dm05RFpvNlRoc21nMTdhblFJREFRQUJBb0lCQUI0ZWR0djFPeGk3RkU1Tgo5aGY5Kzg5RUR6bVgxTmdIc3Bmd1pOdDdrZlRzWGdiSG5OUFRpUllmSXR5dWI1Nno3UWdpMHdQZWpiUnZ6U3U4CmcxYnVWTEVTZnMxRFJYbXZZaWd6NTNHWHk3UUxRZHNlY1VxOXJINXcycE5Zazk0cGRoK2t5Q1ZkYTE4akd2VngKTjdLbW83YlNYZndzWnFmdmFNVDNhMGN2dlJzQ1FFT3hELzZKRHBoK2Z5SnRMcEJTZnRoSzU1N0ZzYXg2YW15YQpCdHUwcHdHSVF1VkJLVHZPR0w1bjRRUWFkalF3QWpDN1BCTUFuMFlzMVFTWGFwcHpDbDlwb1dnVVRYTXVSaWdICmZwUTROR2RiMWFpbHJmVzJNUG5IMEpaelYwUmNXOElaSXVkRk92UlR6dUNxQ0s0OXU0V2d5SHIzZEQzeWs1dkUKL0VnN3VFRUNnWUVBNDZjdW9BcmVYdjJXVHNCQ0RxYTdIOUZvNVVXamdMdkNYWVR6U2xPajdLaGZvbXF2SEJQcwpNa1JWRTZoM2kvVEc0VWN1dnRyUDZnRVZTZXNHbDNXQ2dhWmIzQTluMk40cDA3Ky9BajdsZWtRV0tDVnZkSnFwCmd2K3hTWTVLSlgwZFNyVzI3QW5JSUtDa3pNNlErbkpVYjZjR3RwcFRYbGxNTWxVMVFPaTlyaTBDZ1lFQSswdS8KQXh1VEh1UExZVWlFWFdhNkxpL2ZuZTc4ZkZ6OXJwdmJrL0VJSk9neTFndWp5TXdlR0ZxTGs3WXNUWHY1Y2ZGVQo4NHZ4UXU0U3MyeHRVRDA3NVFUMUNPYllFN0tiTEh3bFdZSW1qUGFkd2J0d3FvcWt1QmxwTVVIMGQ1MmZ0MTJGCkhtYUE1NkhwTUFld0w1c1N5ZU0vY1kvaTBpRCtVRndkcjZscEZERUNnWUVBc2JTUlN0RHhJTWxuQ1hZK21sMUEKZU9mb3NBQWFUNlZCWmVzZ1Z3YlBVUzlsNTh6TGdHbDAyUkJLTVJ3eXBZZWZyNzczR0hpS0VDcGtTZDB5dWd3NgpvYVlRMHNrYjBVZ3E4bVlkWGsxbXFIaDVxMEQ5cmRJRlBJTUlDMWtOUEJKY1NUTnI1UGtGeGFKZ3dwY0V5TnR5CldlM1I2Ynl5RTFZMWlwekZBelFxek1rQ2dZQXZhcFY2TXFQSitsV1AzNjBLS3E0S3RRSE92UjlySCtqR0g2YUkKL2J2NXFzNmMwTWx3eEFNUnVWUUk1U0RxNWUrbGJsSUhPbXFscEdKbTlKaVR3Vm9oMXBPZHdHRVpKbVJkT25lWgpzaE13R2dDZVk0M1l3QnhnbUhyZXpvRWdhTitRSzlkSWF6TDdnZk9NR29kR0ZFNnhSVzNkTWJjc3l3anhoTkFkCkt5d21vUUtCZ1FEaEd4K3NXRzI1cXNVUG9SazMrWFZBUWZRT1JyLzN0MnVZZ1lNTUlKU0hnOWZXODJ0SjRMWjgKUi9NS0hucDF0aU1BT1JMRjNOck5pdG15T2FlQ1BiWWZScnljZWZWeXViVlZ6RGJsMGEzSWhnS1VPWTdzWmdZQwovWW9aZVZIaGc1ZzZHdmlKVERnZjdraUhPRDdGRUxEYVhrTVRYVGdFUys3dENFNncyUzVjL3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: gitpod/charts/docker-registry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-config
  labels:
    app: docker-registry
    chart: docker-registry-1.11.0
    heritage: Helm
    release: gitpod
data:
  config.yml: |-
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
    http:
      addr: :5000
      headers:
        X-Content-Type-Options:
        - nosniff
    log:
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: inmemory
    version: 0.1
---
# Source: gitpod/charts/minio/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: gitpod
    heritage: Helm
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }
    
    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
      VERSIONING=$4
    
      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          ${MC} rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi
    
      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        ${MC} mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi
    
    
      # set versioning for bucket
      if [ ! -z $VERSIONING ] ; then
        if [ $VERSIONING = true ] ; then
            echo "Enabling versioning for '$BUCKET'"
            ${MC} version enable myminio/$BUCKET
        elif [ $VERSIONING = false ] ; then
            echo "Suspending versioning for '$BUCKET'"
            ${MC} version suspend myminio/$BUCKET
        fi
      else
          echo "Bucket '$BUCKET' versioning unchanged."
      fi
    
      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      ${MC} policy set $POLICY myminio/$BUCKET
    }
    
    # Try connecting to Minio instance
    scheme=http
    connectToMinio $scheme
---
# Source: gitpod/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  namespace: gitpod
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-8.6.2
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: gitpod/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: messagebus-config
  namespace: "gitpod"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
data:
  rabbitmq.conf: |-
    
    ## Clustering
    ##
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    load_definitions = /app/load_definition.json
    # Increase statistics emission interval https://www.rabbitmq.com/management.html#statistics-interval
    collect_statistics_interval = 15000
    
    ssl_options.verify = verify_peer
    listeners.ssl.default = 5671
    ssl_options.fail_if_no_peer_cert = true
    ssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
    ssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem
    ssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem
    ## Prometheus metrics
    ##
    prometheus.tcp.port = 9419
---
# Source: gitpod/templates/agent-smith-configmap.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: agent-smith-config
  labels:
    app: gitpod
    component: agent-smith
    kind: secret
    stage: production
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  config.json: |
    {
      "blacklists": {
        "very": {
          "signatures": [
            {
              "name": "testtarget",
              "domain": "process",
              "kind": "elf",
              "pattern": "YWdlbnRTbWl0aFRlc3RUYXJnZXQ=",
              "regexp": false
            }
          ]
        }
      },
      "pprofAddr": "localhost:6060",
      "prometheusAddr": "localhost:9500",
      "hostURL": "https://localhost",
      "egressTraffic": {
        "dt": "2m",
        "excessive": {
          "baseBudget": "300Mi",
          "perDtThreshold": "100Mi"
        },
        "veryExcessive": {
          "baseBudget": "2Gi",
          "perDtThreshold": "250Mi"
        }
      }
    }
---
# Source: gitpod/templates/auth-providers-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-providers-config
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  auth-providers.json: "[]"
---
# Source: gitpod/templates/blobserve-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: blobserve-config
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  config.json: |-
    {
        "dockerAuth": "/mnt/pull-secret.json",
        "pprofAddr": ":6060",
        "prometheusAddr": "127.0.0.1:9500"
        , "blobserve": {
            "port": 32224,
            "timeout": "5s",
            "repos": {
                "gcr.io/gitpod-io/self-hosted/ide/theia": {
                    "prePull": ["0.10.0"],
                    "workdir": "/theia/theia-app/app/lib"
                },
                "gcr.io/gitpod-io/self-hosted/ide/code": {
                    "prePull": ["0.10.0"],
                    "workdir": "/ide",
                    "replacements": [
                        { "search": "vscode-webview.net", "replacement": "localhost", "path": "/ide/out/vs/workbench/workbench.web.api.js" },
                        { "search": "vscode-webview.net", "replacement": "localhost", "path": "/ide/out/vs/workbench/services/extensions/worker/extensionHostWorker.js" }
                    ],
                    "inlineStatic": [
                        { "search": "${window.location.origin}", "replacement": "." },
                        { "search": "value.startsWith(window.location.origin)", "replacement": "value.startsWith(window.location.origin) || value.startsWith('${ide}')" },
                        { "search": "./out", "replacement": "${ide}/out" },
                        { "search": "./node_modules", "replacement": "${ide}/node_modules" },
                        { "search": "/_supervisor/frontend", "replacement": "${supervisor}" }
                    ]
                },
                "gcr.io/gitpod-io/self-hosted/supervisor": {
                    "prePull": ["0.10.0"],
                    "workdir": "/.supervisor/frontend"
                }
            },
            "blobSpace": {
                "location": "/mnt/cache/blobserve",
                "maxSizeBytes": 1073741824
            }
        }
    }
---
# Source: gitpod/templates/content-service-configmap.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: content-service-config
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  config.json: |-
    {
      "pprof": {
        "address": ":6060"
      },
      "prometheus": {
        "address": ":9500"
      },
      "service": {
        "address": ":8080"
      },
      "storage": {
        "blobQuota": 0,
        "kind": "minio",
        "minio": {
          "accessKey": "your-random-access-key",
          "endpoint": "minio.localhost",
          "maxBackupSize": null,
          "parallelUpload": null,
          "region": "local",
          "secretKey": "your-random-secret-key",
          "secure": true,
          "tmpdir": "/tmp"
        }
      }
    }
---
# Source: gitpod/templates/db-initscripts-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: db-init-scripts
  labels:
    app: gitpod
    component: db
    kind: configmap
    stage: production
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  init.sql: |-
    -- Copyright (c) 2020 Gitpod GmbH. All rights reserved.
    -- Licensed under the MIT License. See License-MIT.txt in the project root for license information.
    
    
    -- create test DB user
    SET @gitpodDbPassword = IFNULL(@gitpodDbPassword, 'test');
    
    -- Copyright (c) 2020 Gitpod GmbH. All rights reserved.
    -- Licensed under the MIT License. See License-MIT.txt in the project root for license information.
    
    -- must be idempotent
    
    -- create user (parameterized)
    SET @statementStr = CONCAT(
        'CREATE USER IF NOT EXISTS "gitpod"@"%" IDENTIFIED BY "', @gitpodDbPassword, '";'
    );
    SELECT @statementStr ;
    PREPARE stmt FROM @statementStr; EXECUTE stmt; DEALLOCATE PREPARE stmt;
    
    -- Grant privileges
    GRANT ALL ON `gitpod%`.* TO "gitpod"@"%";
    
    -- Copyright (c) 2020 Gitpod GmbH. All rights reserved.
    -- Licensed under the MIT License. See License-MIT.txt in the project root for license information.
    
    -- must be idempotent
    
    CREATE DATABASE IF NOT EXISTS `gitpod-sessions` CHARSET utf8mb4;
    
    USE `gitpod-sessions`;
    
    CREATE TABLE IF NOT EXISTS sessions (
       `session_id` varchar(128) COLLATE utf8mb4_bin NOT NULL,
       `expires` int(11) unsigned NOT NULL,
       `data` text COLLATE utf8mb4_bin,
       `_lastModified` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
       PRIMARY KEY (`session_id`)
    );
    
    -- Copyright (c) 2020 Gitpod GmbH. All rights reserved.
    -- Licensed under the MIT License. See License-MIT.txt in the project root for license information.
    
    -- must be idempotent
    
    -- @gitpodDB contains name of the DB the script manipulates, 'gitpod' by default.
    -- Prepend the script with "SET @gitpodDB = '`<db-name>`'" if needed otherwise
    SET @gitpodDB = IFNULL(@gitpodDB, '`gitpod`');
    
    SET @statementStr = CONCAT('DROP DATABASE IF EXISTS ', @gitpodDB);
    PREPARE statement FROM @statementStr;
    EXECUTE statement;
    
    SET @statementStr = CONCAT('CREATE DATABASE ', @gitpodDB, ' CHARSET utf8mb4');
    PREPARE statement FROM @statementStr;
    EXECUTE statement;
---
# Source: gitpod/templates/image-builder-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: image-builder-config
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  image-builder.json: |-
    {
        "builder": {"dockerCfgFile": "/config/pull-secret.json","gitpodLayerLoc": "/app/workspace-image-layer.tar.gz",
            "baseImageRepository": "registry.localhost/base-images",
            "workspaceImageRepository": "registry.localhost/workspace-images",
            "imageBuildSalt": "",
            "alpineImage": "alpine:3.14",
            "selfBuildBaseImage": ""
        },
        "refCache": {
            "interval": "6h",
            "refs": ["gitpod/workspace-full:latest"]
        },
        "pprof": {
            "address": ":6060"
        },
        "prometheus": {
            "address": "127.0.0.1:9500"
        },
        "service": {
            "address": ":8080"
        }
    }
---
# Source: gitpod/templates/proxy-configmap.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-config
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  vhost.empty: |
    # Placeholder to avoid errors loading files using a glob pattern
  vhost.minio: |
    https://minio.{$GITPOD_DOMAIN} {
      import enable_log
      import remove_server_header
      import ssl_configuration

      reverse_proxy minio.gitpod.{$KUBE_DOMAIN}:9000 {
        flush_interval -1
      }
    }

  vhost.docker-registry: |
    https://registry.{$GITPOD_DOMAIN} {
      import enable_log
      import remove_server_header
      import ssl_configuration

      basicauth bcrypt "Docker Registry" {
        gitpod JDJhJDEwJExiSzAzVE5IeVd5cVJNWFM2M3k4OXVBbHJEMTBKelNMR0QxMGtXRU5mY01ORVFnZFpJeWIy
      }

      reverse_proxy https://registry.gitpod.svc.cluster.local {
        flush_interval -1
        transport http {
          tls_trusted_ca_certs /etc/caddy/registry-certs/ca.crt
        }
      }
    }
---
# Source: gitpod/templates/registry-facade-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-facade-config
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  config.json: |-
    {
        "dockerAuth": "/mnt/pull-secret.json",
        "registry": {
            "port": 32223,
            "tls": {
                "crt": "/mnt/certificates/tls.crt",
                "key": "/mnt/certificates/tls.key"
            },
            "remoteSpecProvider": {
                "addr": "dns:///ws-manager:8080",
                "tls": {
                    "ca": "/ws-manager-client-tls-certs/ca.crt",
                    "crt": "/ws-manager-client-tls-certs/tls.crt",
                    "key": "/ws-manager-client-tls-certs/tls.key"
                }
            },
            "store": "/mnt/cache/registry",
            "requireAuth": false,
            "staticLayer": [
                {
                    "ref": "gcr.io/gitpod-io/self-hosted/supervisor:0.10.0",
                    "type": "image"
                },
                {
                    "ref": "gcr.io/gitpod-io/self-hosted/docker-up:0.10.0",
                    "type": "image"
                }
            ]
        },
        "pprofAddr": ":6060",
        "prometheusAddr": "127.0.0.1:9500"
    }
---
# Source: gitpod/templates/restarter-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: restarter-scripts
  labels:
    app: gitpod
    component: restarter
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  run.sh: |
    #!/usr/bin/env sh
    kubectl rollout restart deployment proxy -n gitpod
    kubectl rollout restart daemonset registry-facade -n gitpod
    kubectl rollout restart deployment ws-proxy -n gitpod
---
# Source: gitpod/templates/workspace-template.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.


apiVersion: v1
kind: ConfigMap
metadata:
  name: workspace-template
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  "default.yaml": |
    {"default":{"spec":{"dnsConfig":null,"dnsPolicy":"None","enableServiceLinks":false,"nameservers":["1.1.1.1","8.8.8.8"]}},"spec":{"imagePullSecrets":[{"name":"builtin-registry-auth"}]}}
---
# Source: gitpod/templates/ws-daemon-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: ws-daemon-config
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  config.json: |-
    {
      "daemon": {
        "content": {
          "backup": {
            "attempts": 3,
            "timeout": "5m"
          },
          "initializer": {
            "command": "/app/content-initializer"
          },
          "storage": {
            "blobQuota": 0,
            "kind": "minio",
            "minio": {
              "accessKey": "your-random-access-key",
              "endpoint": "minio.localhost",
              "maxBackupSize": null,
              "parallelUpload": null,
              "region": "local",
              "secretKey": "your-random-secret-key",
              "secure": true,
              "tmpdir": "/tmp"
            }
          },
          "userNamespaces": {
            "fsShift": "shiftfs"
          },
          "workingArea": "/mnt/workingarea",
          "workingAreaNode": "/var/gitpod/workspaces"
        },
        "disk": {
          "minBytesAvail": 21474836480,
          "path": "/mnt/wsdaemon-workingarea"
        },
        "hosts": {
          "enabled": true,
          "fixedHosts": {
            "registryFacade": [
              {
                "addr": "127.0.0.1",
                "name": "reg.localhost"
              }
            ]
          },
          "nodeHostsFile": "/mnt/hosts"
        },
        "readiness": {
          "addr": ":9999",
          "enabled": true
        },
        "resources": {
          "cgroupBasePath": "/mnt/node-cgroups",
          "controlPeriod": "15m",
          "cpuBuckets": [],
          "processPriorities": {
            "default": 10,
            "shell": 6,
            "supervisor": 0,
            "theia": 5
          },
          "samplingPeriod": "10s"
        },
        "runtime": {
          "containerRuntime": {
            "containerd": {
              "socket": "/mnt/containerd.sock"
            },
            "mounts": {
              "proc": "/mnt/mounts"
            },
            "nodeToContainerMapping": {
              "/run/containerd/io.containerd.runtime.v1.linux/k8s.io": "/mnt/node1",
              "/var/lib": "/mnt/node0"
            },
            "runtime": "containerd"
          },
          "namespace": "gitpod"
        },
        "uidmapper": {
          "procLocation": "/proc",
          "rootUIDRange": {
            "size": 1,
            "start": 33333
          },
          "userUIDRange": [
            {
              "size": 70000,
              "start": 100000
            }
          ]
        }
      },
      "pprof": {
        "address": ":6060"
      },
      "prometheus": {
        "address": "127.0.0.1:9500"
      },
      "service": {
        "address": ":8080",
        "tls": {
          "ca": "/certs/ca.crt",
          "crt": "/certs/tls.crt",
          "key": "/certs/tls.key"
        }
      }
    }
---
# Source: gitpod/templates/ws-manager-bridge-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: ws-manager-bridge-config
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  ws-manager-bridge.json: |-
    {
        "installation": "local-00",
        "wsClusterDBReconcileIntervalSeconds": 60,
        "controllerIntervalSeconds": 60,
        "controllerMaxDisconnectSeconds": 150,
        "clusterService": {
          "host": "localhost",
          "port": "8080"
        },
        "staticBridges": [{"govern":true,"maxScore":100,"name":"local-00","score":50,"state":"available","tls":{"ca":"/ws-manager-client-tls-certs/ca.crt","crt":"/ws-manager-client-tls-certs/tls.crt","key":"/ws-manager-client-tls-certs/tls.key"},"url":"dns:///ws-manager:8080"}]
    }
---
# Source: gitpod/templates/ws-manager-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: ws-manager-config
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  config.json: |-
    {
        "manager": {
            "namespace": "gitpod",
            "schedulerName": "workspace-scheduler",
            "seccompProfile": "localhost/workspace_default_0.10.0.json",
            "dryRun": false,
            "wsdaemon": {
                "port": 8080,
                "tls": {
                    "ca": "/ws-daemon-tls-certs/ca.crt",
                    "crt": "/ws-daemon-tls-certs/tls.crt",
                    "key": "/ws-daemon-tls-certs/tls.key"
                }
            },
            "container": {
                "workspace": {
                    "requests": {"cpu":"1m","memory":"2.25Gi","storage":"5Gi"},
                    
                    "limits": {"cpu":"5","memory":"12Gi"},
                    "image": "OVERWRITTEN-IN-REQUEST"
                }
            },
            "heartbeatInterval": "30s",
            "hostURL": "https://localhost",
            "initProbe": {
                "timeout": "1s"
            },
            "urlTemplate":     "https://{{ .Prefix }}.ws.localhost",
            "portUrlTemplate": "https://{{ .WorkspacePort }}-{{ .Prefix }}.ws.localhost",
            "workspaceHostPath": "/var/gitpod/workspaces",
            "podTemplate": {"defaultPath": "/workspace-template/default.yaml"
            },
            "timeouts": {
                "afterClose": "2m",
                "headlessWorkspace": "60m",
                "initialization": "30m",
                "regularWorkspace": "30m",
                "startup": "60m",
                "contentFinalization": "15m",
                "stopping": "60m",
                "interrupted": "5m"
            },
            
            "reconnectionInterval": "30s",
            "registryFacadeHost": "reg.localhost:3000"
            
        },
        "content": {"storage":{"blobQuota":0,"kind":"minio","minio":{"accessKey":"your-random-access-key","endpoint":"minio.localhost","maxBackupSize":null,"parallelUpload":null,"region":"local","secretKey":"your-random-secret-key","secure":true,"tmpdir":"/tmp"}}},
        "rpcServer": {
            "addr": ":8080",
            "tls": {
                "ca": "/certs/ca.crt",
                "crt": "/certs/tls.crt",
                "key": "/certs/tls.key"
            }
        },
        "pprof": {
            "addr": "localhost:6060"
        },
        "prometheus": {
            "addr": "127.0.0.1:9500"
        }
    }
---
# Source: gitpod/templates/ws-proxy-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: ws-proxy-config
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  config.json: |-
    {
        "ingress": {
            "httpAddress": ":8080",
            "httpsAddress": ":9090",
            "header": "x-wsproxy-host"
        },
        "workspaceInfoProviderConfig": {
            "wsManagerAddr": "ws-manager:8080",
            "reconnectInterval": "3s",
            "tls": {
                "ca": "/ws-manager-client-tls-certs/ca.crt",
                "crt": "/ws-manager-client-tls-certs/tls.crt",
                "key": "/ws-manager-client-tls-certs/tls.key"
            }
        },
        "proxy": {
            "https": {
                "crt": "/mnt/certificates/tls.crt",
                "key": "/mnt/certificates/tls.key"
            },
            "transportConfig": {
                "connectTimeout": "10s",
                "idleConnTimeout": "60s",
                "maxIdleConns": 0,
                "maxIdleConnsPerHost": 100
            },
            "blobServer": {
                "scheme": "http",
                "host": "blobserve.gitpod.svc.cluster.local:4000"
            },
            "gitpodInstallation": {
                "scheme": "https",
                "hostName": "localhost",
                "workspaceHostSuffix": ".ws.localhost",
                "workspaceHostSuffixRegex": "\\.ws[^\\.]*\\.localhost"
            },
            "workspacePodConfig": {
                "serviceTemplate": "http://ws-{{ .workspaceID }}-theia.gitpod.svc.cluster.local:{{ .port }}",
                "portServiceTemplate": "http://ws-{{ .workspaceID }}-ports.gitpod.svc.cluster.local:{{ .port }}",
                "theiaPort": 23000,
                "supervisorPort": 22999,
                "supervisorImage": "gcr.io/gitpod-io/self-hosted/supervisor:0.10.0"
            },
            "builtinPages": {
                "location": "/app/public"
            }
        },
        
        "pprofAddr": ":60060",
        "readinessProbeAddr": ":60088",
        "prometheusAddr": ":60095"
    }
---
# Source: gitpod/templates/ws-scheduler-configmap.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.


apiVersion: v1
kind: ConfigMap
metadata:
  name: ws-scheduler-config
  labels:
    app: gitpod
    chart: "gitpod-0.10.0"
    release: "gitpod"
    heritage: "Helm"
data:
  config.json: |-
    {
        "pprof": {
            "addr": "localhost:6060"
        },
        "prometheus": {
            "addr": "127.0.0.1:9500"
        },
        "scheduler": {
            "schedulerName": "workspace-scheduler",
            "namespace": "gitpod",
            "nodeLabelSelector": {},
            "strategyName": "DensityAndExperience",
            "densityAndExperienceConfig": {
                "workspaceFreshPeriodSeconds": 120,
                "nodeFreshWorkspaceLimit": 2
            }
            , "rateLimit": {
                "maxRPS": 10
            }
        }
        
    }
---
# Source: gitpod/charts/minio/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: gitpod
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "500Gi"
---
# Source: gitpod/templates/cluster-privileged-psp-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-ns-psp:privileged
  labels:
    app: gitpod
    component: cluster
    kind: clusterrole
    stage: production
rules:
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
    resourceNames:
    - gitpod-ns-privileged
---
# Source: gitpod/templates/cluster-restricted-root-psp-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-ns-psp:restricted-root-user
  labels:
    app: gitpod
    component: cluster
    kind: clusterrole
    stage: production
rules:
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
    resourceNames:
    - gitpod-ns-restricted-root-user
---
# Source: gitpod/templates/cluster-unprivileged-psp-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-ns-psp:unprivileged
  labels:
    app: gitpod
    component: cluster
    kind: clusterrole
    stage: production
rules:
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
    resourceNames:
    - gitpod-ns-unprivileged
---
# Source: gitpod/templates/image-builder-psp-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-ns-image-builder
  labels:
    app: gitpod
    component: cluster
    kind: clusterrole
    stage: production
rules:
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
    resourceNames:
    - gitpod-ns-privileged-unconfined
---
# Source: gitpod/templates/kube-rbac-proxy-clusterrole.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gitpod-kube-rbac-proxy
rules:
- apiGroups: ["authentication.k8s.io"]
  resources:
  - tokenreviews
  verbs: ["create"]
- apiGroups: ["authorization.k8s.io"]
  resources:
  - subjectaccessreviews
  verbs: ["create"]
---
# Source: gitpod/templates/registry-facade-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-ns-registry-facade
  labels:
    app: gitpod
    component: cluster
    kind: clusterrole
    stage: production
rules:
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
    resourceNames:
    - gitpod-ns-registry-facade
---
# Source: gitpod/templates/ws-daemon-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-ns-ws-daemon
  labels:
    app: gitpod
    component: ws-daemon
    kind: clusterrole
    stage: production
rules:
- apiGroups:
  - "policy"
  resources:
  - "podsecuritypolicies"
  verbs:
  - "use"
  resourceNames:
  - "gitpod-ns-privileged-unconfined"
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - update
  - patch
---
# Source: gitpod/templates/ws-scheduler-clusterrole.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-ns-ws-scheduler
  labels:
    app: gitpod
    component: ws-scheduler
    kind: role
    stage: production
rules:
  - apiGroups:
    - ""
    resources:
    - "nodes"
    verbs:
    - "get"
    - "list"
    - "watch"
  - apiGroups:
    - ""
    resources:
    - "pods"
    verbs:
    - "delete"
    - "get"
    - "list"
    - "watch"
    - "update"
    - "patch"
  - apiGroups:
    - ""
    resources:
    - "pods/status"
    verbs:
    - "update"
  - apiGroups:
    - ""
    resources:
    - "pods/binding"
    - "events"
    verbs:
    - "create"
  - apiGroups:
    - "policy"
    resources:
    - "podsecuritypolicies"
    verbs:
    - "use"
    resourceNames:
    - "gitpod-ns-unprivileged"
---
# Source: gitpod/templates/agent-smith-role-binding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-agent-smith-rb-kube-rbac-proxy
  labels:
    app: gitpod
    component: agent-smith
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: agent-smith
  namespace: gitpod
roleRef:
  kind: ClusterRole
  name:  gitpod-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/blobserve-rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-blobserve-kube-rbac-proxy
  labels:
    app: gitpod
    component: blobserve
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: blobserve
  namespace: gitpod
roleRef:
  kind: ClusterRole
  name:  gitpod-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/cluster-unprivileged-psp-nobody-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-ns-nobody
  labels:
    app: gitpod
    component: cluster
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: nobody
  namespace: gitpod
roleRef:
  kind: ClusterRole
  name: gitpod-ns-psp:unprivileged
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/image-builder-rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-image-builder-kube-rbac-proxy
  labels:
    app: gitpod
    component: image-builder
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: image-builder
  namespace: gitpod
roleRef:
  kind: ClusterRole
  name:  gitpod-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/registry-facade-rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-registry-facade-kube-rbac-proxy
  labels:
    app: gitpod
    component: registry-facade
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: registry-facade
  namespace: gitpod
roleRef:
  kind: ClusterRole
  name:  gitpod-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/server-rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-server-rb-kube-rbac-proxy
  labels:
    app: gitpod
    component: server
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: server
  namespace: gitpod
roleRef:
  kind: ClusterRole
  name:  gitpod-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-daemon-rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-ws-daemon-rb-kube-rbac-proxy
  labels:
    app: gitpod
    component: ws-daemon
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-daemon
  namespace: gitpod
roleRef:
  kind: ClusterRole
  name:  gitpod-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-manager-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gitpod-ws-manager-kube-rbac-proxy
  labels:
    app: gitpod
    component: ws-manager
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-manager
  namespace: gitpod
roleRef:
  kind: ClusterRole
  name:  gitpod-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-scheduler-clusterrolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-ns-ws-scheduler
  labels:
    app: gitpod
    component: ws-scheduler
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-scheduler
  namespace: gitpod
roleRef:
  kind: ClusterRole
  name: gitpod-ns-ws-scheduler
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-scheduler-clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitpod-ns-ws-scheduler-kube-rbac-proxy
  labels:
    app: gitpod
    component: ws-scheduler
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-scheduler
  namespace: gitpod
roleRef:
  kind: ClusterRole
  name:  gitpod-kube-rbac-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/charts/minio/templates/post-install-prometheus-metrics-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-8.0.10
    release: gitpod
    heritage: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
      - update
      - patch
    resourceNames:
      - minio-prometheus
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - servicemonitors
    verbs:
      - get
    resourceNames:
      - minio
---
# Source: gitpod/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: messagebus-endpoint-reader
  namespace: "gitpod"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: gitpod/templates/agent-smith-role.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: gitpod
    component: agent-smith
    kind: role
    stage: production
  name: agent-smith
rules:
- apiGroups:
  - "policy"
  resources:
  - "podsecuritypolicies"
  verbs:
  - "use"
  resourceNames:
  - "gitpod-ns-privileged-unconfined"
---
# Source: gitpod/templates/server-role.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: server
  labels:
    app: gitpod
    component: server
    kind: role
    stage: production
rules:
- apiGroups:
  - ''
  resources:
  - services
  verbs:
  - get
  - list
  - create
  - update
  - patch
  - watch
  - delete
  - deletecollection
- apiGroups:
  - ''
  resources:
  - pods
  - pods/log
  verbs:
  - get
  - list
  - create
  - update
  - patch
  - watch
  - delete
  - deletecollection
---
# Source: gitpod/templates/workspace-role.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: workspace
  labels:
    app: gitpod
    component: workspace
    kind: role
    stage: production
rules:
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
    resourceNames:
    - gitpod-ns-workspace
---
# Source: gitpod/templates/ws-manager-role.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: gitpod
    component: ws-manager
    kind: role
    stage: production
  name: ws-manager
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  - events
  - services
  - endpoints
  - configmaps
  verbs:
  - get
  - list
  - create
  - update
  - patch
  - watch
  - delete
  - deletecollection
---
# Source: gitpod/charts/minio/templates/post-install-prometheus-metrics-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-8.0.10
    release: gitpod
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: minio-update-prometheus-secret
subjects:
  - kind: ServiceAccount
    name: minio-update-prometheus-secret
    namespace: "gitpod"
---
# Source: gitpod/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: messagebus-endpoint-reader
  namespace: "gitpod"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: messagebus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: messagebus-endpoint-reader
---
# Source: gitpod/templates/agent-smith-role-binding.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: agent-smith
  labels:
    app: gitpod
    component: agent-smith
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: agent-smith
roleRef:
  kind: Role
  name: agent-smith
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/blobserve-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: blobserve
  labels:
    app: gitpod
    component: blobserve
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: blobserve
roleRef:
  kind: ClusterRole
  name: gitpod-ns-psp:restricted-root-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/content-service-rolebinding.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: content-service
  labels:
    app: gitpod
    component: content-service
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: content-service
roleRef:
  kind: ClusterRole
  name: gitpod-ns-psp:restricted-root-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/dashboard-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dashboard
  labels:
    app: gitpod
    component: dashboard
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: dashboard
roleRef:
  kind: ClusterRole
  name: gitpod-ns-psp:restricted-root-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/db-migrations-restricted-root-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: db-migrations
  labels:
    app: gitpod
    component: db
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: db-migrations
roleRef:
  kind: ClusterRole
  name: gitpod-ns-psp:restricted-root-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/db-restricted-root-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: db
  labels:
    app: gitpod
    component: db
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: db
roleRef:
  kind: ClusterRole
  name: gitpod-ns-psp:restricted-root-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/image-builder-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: image-builder-rb
  labels:
    app: gitpod
    component: image-builder
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: image-builder
roleRef:
  kind: ClusterRole
  name: gitpod-ns-image-builder
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/messagebus-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: messagebus
  labels:
    app: gitpod
    component: messagebus
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: messagebus
roleRef:
  kind: ClusterRole
  name: gitpod-ns-psp:restricted-root-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/proxy-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: proxy
  labels:
    app: gitpod
    component: proxy
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: proxy
roleRef:
  kind: ClusterRole
  name: gitpod-ns-psp:restricted-root-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/registry-facade-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: registry-facade
  labels:
    app: gitpod
    component: registry-facade
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: registry-facade
roleRef:
  kind: ClusterRole
  name: gitpod-ns-registry-facade
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/server-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: server
  labels:
    app: gitpod
    component: server
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: server
roleRef:
  kind: Role
  name: server
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/server-unprivileged-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: server-unprivileged
  labels:
    app: gitpod
    component: server
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: server
roleRef:
  kind: ClusterRole
  name: gitpod-ns-psp:unprivileged
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/workspace-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: workspace
  labels:
    app: gitpod
    component: workspace
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: workspace
roleRef:
  kind: Role
  name: workspace
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-daemon-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ws-daemon-rb
  labels:
    app: gitpod
    component: ws-daemon
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-daemon
roleRef:
  kind: ClusterRole
  name: gitpod-ns-ws-daemon
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-manager-bridge-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ws-manager-bridge
  labels:
    app: gitpod
    component: ws-manager-bridge
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-manager-bridge
roleRef:
  kind: ClusterRole
  name: gitpod-ns-psp:unprivileged
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-manager-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ws-manager
  labels:
    app: gitpod
    component: ws-manager
    kind: role-binding
    stage: production
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ws-manager
subjects:
- kind: ServiceAccount
  name: ws-manager
---
# Source: gitpod/templates/ws-manager-unpriviliged-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ws-manager-unpriviledged
  labels:
    app: gitpod
    component: ws-manager
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-manager
roleRef:
  kind: ClusterRole
  name: gitpod-ns-psp:unprivileged
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/templates/ws-proxy-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ws-proxy
  labels:
    app: gitpod
    component: ws-proxy
    kind: role-binding
    stage: production
subjects:
- kind: ServiceAccount
  name: ws-proxy
roleRef:
  kind: ClusterRole
  name: gitpod-ns-psp:unprivileged
  apiGroup: rbac.authorization.k8s.io
---
# Source: gitpod/charts/docker-registry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: registry
  labels:
    app: docker-registry
    chart: docker-registry-1.11.0
    release: gitpod
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - port: 443
      protocol: TCP
      name: https-443
      targetPort: 5000
  selector:
    app: docker-registry
    release: gitpod
---
# Source: gitpod/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: gitpod
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: minio
    release: gitpod
---
# Source: gitpod/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
  namespace: gitpod
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-8.6.2
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/component: primary
---
# Source: gitpod/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: gitpod
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-8.6.2
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/component: primary
---
# Source: gitpod/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: messagebus-headless
  namespace: "gitpod"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: amqp-ssl
      port: 5671
      targetPort: amqp-tls
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: gitpod
---
# Source: gitpod/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: messagebus
  namespace: "gitpod"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: amqp-ssl
      port: 5671
      targetPort: amqp-ssl
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
    - name: metrics
      port: 9419
      targetPort: metrics
      nodePort: null
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: gitpod
---
# Source: gitpod/templates/blobserve-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: blobserve
  labels:
    app: gitpod
    component: blobserve
    kind: service
    stage: production
spec:
  ports:
  - name: service
    protocol: TCP
    
    
    port: 4000
    targetPort: 32224
  selector:
    app: gitpod
    component: blobserve
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/content-service-service.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: content-service
  labels:
    app: gitpod
    component: content-service
    kind: service
    stage: production
spec:
  ports:
  - name: metrics
    protocol: TCP
    
    port: 9500
    
  - name: rpc
    protocol: TCP
    
    port: 8080
    
  selector:
    app: gitpod
    component: content-service
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/dashboard-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: dashboard
  labels:
    app: gitpod
    component: dashboard
    kind: service
    stage: production
spec:
  ports:
  - name: http
    protocol: TCP
    
    
    port: 3001
    targetPort: 80
  selector:
    app: gitpod
    component: dashboard
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/db-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.


kind: Service
apiVersion: v1
metadata:
  name: db
  labels:
    app: gitpod
    component: db
    kind: service
    stage: production
spec:
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306
  selector:
    app.kubernetes.io/name: mysql
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/image-builder-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: image-builder
  labels:
    app: gitpod
    component: image-builder
    kind: service
    stage: production
spec:
  ports:
  - name: rpc
    protocol: TCP
    
    port: 8080
    
  selector:
    app: gitpod
    component: image-builder
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/proxy-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: proxy
  labels:
    app: gitpod
    component: proxy
    kind: service
    stage: production
spec:
  ports:
  - name: http
    protocol: TCP
    
    port: 80
    
  - name: https
    protocol: TCP
    
    port: 443
    
  selector:
    app: gitpod
    component: proxy
    kind: pod
    stage: production
  type: LoadBalancer
  sessionAffinity: None
---
# Source: gitpod/templates/registry-facade-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: registry-facade
  labels:
    app: gitpod
    component: registry-facade
    kind: service
    stage: production
    feature: registry
spec:
  ports:
  - name: registry
    protocol: TCP
    
    
    port: 3000
    targetPort: 32223
  selector:
    app: gitpod
    component: registry-facade
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/server-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: server
  labels:
    app: gitpod
    component: server
    kind: service
    stage: production
spec:
  ports:
  - name: debug
    protocol: TCP
    
    port: 9229
    
  - name: http
    protocol: TCP
    
    
    port: 3000
    targetPort: 3000
  - name: metrics
    protocol: TCP
    
    port: 9500
    
  selector:
    app: gitpod
    component: server
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/ws-daemon-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: ws-daemon
  labels:
    app: gitpod
    component: ws-daemon
    kind: service
    stage: production
spec:
  ports:
  selector:
    app: gitpod
    component: ws-daemon
    kind: daemonset
    stage: production
  type: ClusterIP
  clusterIP: None
  sessionAffinity: None
---
# Source: gitpod/templates/ws-manager-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: ws-manager
  labels:
    app: gitpod
    component: ws-manager
    kind: service
    stage: production
spec:
  ports:
  - name: rpc
    protocol: TCP
    
    port: 8080
    
  selector:
    app: gitpod
    component: ws-manager
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/ws-proxy-service.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Service
apiVersion: v1
metadata:
  name: ws-proxy
  labels:
    app: gitpod
    component: ws-proxy
    kind: service
    stage: production
spec:
  ports:
  - name: httpproxy
    protocol: TCP
    
    port: 8080
    
  - name: httpsproxy
    protocol: TCP
    
    port: 9090
    
  - name: metrics
    protocol: TCP
    
    port: 9500
    
  selector:
    app: gitpod
    component: ws-proxy
    kind: pod
    stage: production
  type: ClusterIP
  sessionAffinity: None
---
# Source: gitpod/templates/agent-smith-daemonset.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: agent-smith
  labels:
    app: gitpod
    component: agent-smith
    kind: daemonset
    stage: production
spec:
  selector:
    matchLabels:
      app: gitpod
      component: agent-smith
      kind: daemonset
      stage: production
  template:
    metadata:
      labels:
        app: gitpod
        component: agent-smith
        kind: daemonset
        stage: production
    spec:
      
      serviceAccountName: agent-smith
      hostPID: true
      volumes:
      - name: config
        configMap:
          name: agent-smith-config
      enableServiceLinks: false
      containers:
      - name: agent-smith
        volumeMounts:
        - mountPath: /config
          name: config
        args: ["run", "-v", "--config", "/config/config.json"]
        image: gcr.io/gitpod-io/self-hosted/agent-smith:0.10.0
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  32Mi
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: VERSION
          value: "0.10.0"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
        - name: NODENAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        # readinessProbe:
        #   httpGet:
        #     port: 9999
        #     path: "/"
        #   initialDelaySeconds: 5
        #   periodSeconds: 10
        securityContext:
          privileged: true
          procMount: Default
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/registry-facade-daemonset.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: registry-facade
  labels:
    app: gitpod
    component: registry-facade
    kind: deployment
    stage: production
    gitpod.io/nodeService: registry-facade
spec:
  selector:
    matchLabels:
      app: gitpod
      component: registry-facade
      kind: pod
      stage: production
      gitpod.io/nodeService: registry-facade
  template:
    metadata:
      name: registry-facade
      labels:
        app: gitpod
        component: registry-facade
        kind: pod
        stage: production
        gitpod.io/nodeService: registry-facade
    spec:
      
      serviceAccountName: registry-facade
      enableServiceLinks: false
      containers:
      - name: registry-facade
        image: gcr.io/gitpod-io/self-hosted/registry-facade:0.10.0
        args: ["run", "-v", "/mnt/config/config.json"]
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  32Mi
        ports:
        - name: registry
          containerPort: 32223
          hostPort: 3000
        securityContext:
          privileged: false
          runAsUser: 1000
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: VERSION
          value: "0.10.0"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
        - name: GRPC_GO_RETRY
          value: "on"
        volumeMounts:
        - name: cache
          mountPath: "/mnt/cache"
        - name: config
          mountPath: "/mnt/config"
          readOnly: true
        - mountPath: /ws-manager-client-tls-certs
          name: ws-manager-client-tls-certs
          readOnly: true
        - name: pull-secret
          mountPath: /mnt/pull-secret.json
          subPath: .dockerconfigjson
        - name: https-certificates
          mountPath: "/mnt/certificates"
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: cache
        emptyDir: {}
      - name: config
        configMap:
          name: registry-facade-config
      - name: ws-manager-client-tls-certs
        secret:
          secretName: ws-manager-client-tls
      - name: pull-secret
        secret:
          secretName: builtin-registry-auth
      - name: https-certificates
        secret:
          secretName: https-certificates
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/ws-daemon-daemonset.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ws-daemon
  labels:
    app: gitpod
    component: ws-daemon
    kind: daemonset
    stage: production
    gitpod.io/nodeService: ws-daemon
spec:
  selector:
    matchLabels:
      app: gitpod
      component: ws-daemon
      kind: daemonset
      stage: production
      gitpod.io/nodeService: ws-daemon
  template:
    metadata:
      labels:
        app: gitpod
        component: ws-daemon
        kind: daemonset
        stage: production
        gitpod.io/nodeService: ws-daemon
      annotations:
        checksum/tlskey: 99470731a692e9243ec4a0bdd365bb8342d2ce4ed1ae13639de994ffa7afe4f2
    spec:
      
      # see https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/ for more
      # details on this priority class.
      # Pior to Kubernetes 1.17 critical pods can only be scheduled in kube-system: https://github.com/kubernetes/kubernetes/pull/76310
      # Leaving this in here so that others might enable it and we don't forget about this when 1.17 comes around in GKE.
      # priorityClassName: system-node-critical
      tolerations:
      - key: node.kubernetes.io/disk-pressure
        operator: "Exists"
        effect: "NoExecute"
      - key: node.kubernetes.io/memory-pressure
        operator: "Exists"
        effect: "NoExecute"
      - key: node.kubernetes.io/out-of-disk
        operator: "Exists"
        effect: "NoExecute"
      serviceAccountName: ws-daemon
      hostPID: true
      volumes:
      - hostPath:
          path: /var/gitpod/workspaces
          type: DirectoryOrCreate
        name: working-area
      - name: tls-certs
        secret:
          secretName: ws-daemon-tls
      - name: config
        configMap:
          name: ws-daemon-config
      - name: containerd-socket
        hostPath:
          path: /run/containerd/containerd.sock
          type: Socket
      - name: node-fs0
        hostPath:
          path: /var/lib
          type: Directory
      - name: node-fs1
        hostPath:
          path: /run/containerd/io.containerd.runtime.v1.linux/k8s.io
          type: Directory
      - name: node-mounts
        hostPath:
          path: /proc/mounts
          type: File
      - name: node-cgroups
        hostPath:
          path: /sys/fs/cgroup
          type: Directory
      - name: node-hosts
        hostPath:
          path: /etc/hosts
          type: File
      - name: hostseccomp
        hostPath:
          path: /var/lib/kubelet/seccomp
      enableServiceLinks: false
      initContainers:
      - name: seccomp-profile-installer
        volumeMounts:
        - mountPath: /mnt/dst
          name: hostseccomp
        image: gcr.io/gitpod-io/self-hosted/seccomp-profile-installer:0.10.0
        securityContext:
          privileged: true
        command: ["/bin/sh", "-c", "cp -f /installer/workspace_default.json /mnt/dst/workspace_default_0.10.0.json"]
      - name: sysctl
        image: gcr.io/gitpod-io/self-hosted/ws-daemon:0.10.0
        securityContext:
          privileged: true
        command:
          - sh
          - -c
          - >
            (
              echo "running sysctls" &&
              sysctl -w net.core.somaxconn=4096 &&
              sysctl -w "net.ipv4.ip_local_port_range=5000 65000" &&
              sysctl -w "net.ipv4.tcp_tw_reuse=1" &&
              sysctl -w fs.inotify.max_user_watches=1000000 &&
              sysctl -w "kernel.dmesg_restrict=1"
            ) && echo "done!" || echo "failed!"
      containers:
      - name: ws-daemon
        volumeMounts:
        - mountPath: /mnt/workingarea
          name: working-area
          mountPropagation: Bidirectional
        - mountPath: /config
          name: config
        - mountPath: /mnt/containerd.sock
          name: containerd-socket
        - mountPath: /mnt/node0
          name: node-fs0
        - mountPath: /mnt/node1
          name: node-fs1
        - mountPath: /mnt/mounts
          name: node-mounts
          readOnly: true
          mountPropagation: HostToContainer
        - mountPath: /mnt/node-cgroups
          name: node-cgroups
          mountPropagation: HostToContainer
        - mountPath: /mnt/hosts
          name: node-hosts
        - mountPath: /certs
          name: tls-certs
        args: ["run", "-v", "--config", "/config/config.json"]
        image: gcr.io/gitpod-io/self-hosted/ws-daemon:0.10.0
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: VERSION
          value: "0.10.0"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
        - name: NODENAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        ports:
        - name: rpc
          containerPort: 8080
          hostPort: 8080
        readinessProbe:
          httpGet:
            port: 9999
            path: "/"
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          privileged: true
          procMount: Default
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/charts/docker-registry/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry
  labels:
    app: docker-registry
    chart: docker-registry-1.11.0
    release: gitpod
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: docker-registry
      release: gitpod
  replicas: 1
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: docker-registry
        release: gitpod
      annotations:
        checksum/config: ad24b60bd0fce4ea56a0552f8442d00cb8b6e546a12adfdb29870fba259630eb
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:
        - name: docker-registry
          image: "registry:2.7.1"
          imagePullPolicy: IfNotPresent
          command:
          - /bin/registry
          - serve
          - /etc/docker/registry/config.yml
          ports:
            - containerPort: 5000
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 5000
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 5000
          resources:
            {}
          env:
            - name: REGISTRY_HTTP_SECRET
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: haSharedSecret
            - name: REGISTRY_HTTP_TLS_CERTIFICATE
              value: /etc/ssl/docker/tls.crt
            - name: REGISTRY_HTTP_TLS_KEY
              value: /etc/ssl/docker/tls.key
            - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
              value: "/var/lib/registry"
          volumeMounts:
            - name: data
              mountPath: /var/lib/registry/
            - name: "registry-config"
              mountPath: "/etc/docker/registry"
            - mountPath: /etc/ssl/docker
              name: tls-cert
              readOnly: true
      volumes:
        - name: data
          emptyDir: {}
        - name: registry-config
          configMap:
            name: registry-config
        - name: tls-cert
          secret:
            secretName: builtin-registry-certs
---
# Source: gitpod/charts/minio/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: gitpod
    heritage: Helm
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: minio
      release: gitpod
  template:
    metadata:
      name: minio
      labels:
        app: minio
        release: gitpod
      annotations:
        checksum/secrets: 9b7f34934e837fd0ce97e16c107f0c8d0c0fd7b67c4b69e618e6968ba9888b9f
        checksum/config: c7efefb8314f8e484ebb3fc21f332725d5f7b97a905fe1c9d2e7796663fbf4f1
    spec:
      serviceAccountName: "minio"
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: minio
          image: "minio/minio:RELEASE.2021-02-14T04-01-33Z"
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
            - "-ce"
            - "/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export"
          volumeMounts:
            - name: export
              mountPath: /export            
          ports:
            - name: http
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: secretkey
          resources:
            requests:
              memory: 2G      
      volumes:
        - name: export
          persistentVolumeClaim:
            claimName: minio
        - name: minio-user
          secret:
            secretName: minio
---
# Source: gitpod/templates/blobserve-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: blobserve
  labels:
    app: gitpod
    component: blobserve
    kind: deployment
    stage: production
    gitpod.io/nodeService: blobserve
spec:
  selector:
    matchLabels:
      app: gitpod
      component: blobserve
      kind: pod
      stage: production
      gitpod.io/nodeService: blobserve
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: blobserve
      labels:
        app: gitpod
        component: blobserve
        kind: pod
        stage: production
        gitpod.io/nodeService: blobserve
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      
      serviceAccountName: blobserve
      enableServiceLinks: false
      containers:
      - name: blobserve
        image: gcr.io/gitpod-io/self-hosted/blobserve:0.10.0
        args: ["run", "-v", "/mnt/config/config.json"]
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  32Mi
        securityContext:
          privileged: false
          runAsUser: 1000
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: VERSION
          value: "0.10.0"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
        volumeMounts:
        - name: config
          mountPath: "/mnt/config"
          readOnly: true
        - name: cache
          mountPath: "/mnt/cache"
        - name: pull-secret
          mountPath: /mnt/pull-secret.json
          subPath: .dockerconfigjson
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: cache
        emptyDir: {}
      - name: config
        configMap:
          name: blobserve-config
      - name: pull-secret
        secret:
          secretName: builtin-registry-auth
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/content-service-deployment.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: content-service
  labels:
    app: gitpod
    component: content-service
    kind: deployment
    stage: production
    gitpod.io/nodeService: content-service
spec:
  selector:
    matchLabels:
      app: gitpod
      component: content-service
      kind: pod
      stage: production
      gitpod.io/nodeService: content-service
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: content-service
      labels:
        app: gitpod
        component: content-service
        kind: pod
        stage: production
        gitpod.io/nodeService: content-service
    spec:
      
      serviceAccountName: content-service
      enableServiceLinks: false
      containers:
      - name: content-service
        image: gcr.io/gitpod-io/self-hosted/content-service:0.10.0
        args: ["run", "-v", "--config", "/config/config.json"]
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  32Mi
        ports:
        - name: metrics
          containerPort: 9500
        securityContext:
          privileged: false
          runAsUser: 1000
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: VERSION
          value: "0.10.0"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
        - name: GRPC_GO_RETRY
          value: "on"
        volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: content-service-config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/dashboard-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard
  labels:
    app: gitpod
    component: dashboard
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: gitpod
      component: dashboard
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: dashboard
      labels:
        app: gitpod
        component: dashboard
        kind: pod
        stage: production
      annotations:
        
    spec:
      
      serviceAccountName: dashboard
      enableServiceLinks: false
      containers:
      - name: dashboard
        image: gcr.io/gitpod-io/self-hosted/dashboard:0.10.0
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  32Mi
        
        ports:
        - name: http
          containerPort: 80
        securityContext:
          privileged: false
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: 8080
            scheme: HTTP
          periodSeconds: 1
          successThreshold: 1
          timeoutSeconds: 1
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: VERSION
          value: "0.10.0"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/image-builder-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: image-builder
  labels:
    app: gitpod
    component: image-builder
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: gitpod
      component: image-builder
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: image-builder
      labels:
        app: gitpod
        component: image-builder
        kind: pod
        stage: production
      annotations:
        checksum/builtin-registry-auth: b3e15957bdd17c9b19aacab1b64b5ec03122d8c9990b11969a39e6ce069132b7        
        checksum/image-builder-configmap.yaml: 9bd726943fc6839dd02a915aea7ac867555257f00e0fd10f053714a51950d754
    spec:
      
      serviceAccountName: image-builder
      volumes:
      - name: configuration
        configMap:
          name: image-builder-config
      - name: dind-storage
        hostPath:
          path: /var/gitpod/docker
          type: DirectoryOrCreate
      - name: pull-secret
        secret:
          secretName: builtin-registry-auth
      enableServiceLinks: false
      containers:
      - name: dind
        image: docker:19.03-dind
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          runAsUser: 0
        args: [ "dockerd", "--userns-remap=default", "-H tcp://127.0.0.1:2375"]
        volumeMounts:
        - mountPath: /var/lib/docker
          name: dind-storage
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: VERSION
          value: "0.10.0"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      - name: service
        image: gcr.io/gitpod-io/self-hosted/image-builder:0.10.0
        args:
        - "run"
        - "-v"
        - "--config"
        - "/config/image-builder.json"
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: /config/image-builder.json
          subPath: "image-builder.json"
          name: configuration
        - mountPath: /config/pull-secret.json
          subPath: .dockerconfigjson
          name: pull-secret
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        
        ports:
        - name: rpc
          containerPort: 8080
        securityContext:
          runAsUser: 33333
          privileged: false
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: VERSION
          value: "0.10.0"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
        - name: DOCKER_HOST
          value: "tcp://localhost:2375"
        - name: GRPC_GO_RETRY
          value: "on"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/proxy-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

kind: Deployment
apiVersion: apps/v1
metadata:
  name: proxy
  labels:
    app: gitpod
    component: proxy
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: gitpod
      component: proxy
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      name: proxy
      labels:
        app: gitpod
        component: proxy
        kind: pod
        stage: production
    spec:
      
      serviceAccount: proxy
      securityContext:
        runAsNonRoot: false
      enableServiceLinks: false
      initContainers:
        - name: "sysctl"
          image: "alpine:3.14"
          securityContext:
            privileged: true
          command:
            - sh
            - -c
            - "sysctl -w net.core.somaxconn=32768; sysctl -w net.ipv4.ip_local_port_range='1024 65000'"
      containers:
      - name: proxy
        image: gcr.io/gitpod-io/self-hosted/proxy:0.10.0
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        securityContext:
          privileged: false
        readinessProbe:
          httpGet:
            path: "/ready"
            port: 8003
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: vhosts
          mountPath: "/etc/caddy/vhosts"
        - name: builtin-registry-auth
          mountPath: "/etc/caddy/registry-auth"
        - name: builtin-registry-certs
          mountPath: "/etc/caddy/registry-certs"
        - name: config-certificates
          mountPath: "/etc/caddy/certificates"
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        - name: PROXY_DOMAIN
          value: "localhost"
        - name: SERVER_PROXY_APIKEY
          valueFrom:
            secretKeyRef:
              name: server-proxy-apikey
              key: apikey
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        securityContext:
          privileged: false
      volumes:
      - name: vhosts
        configMap:
          name: proxy-config
      - name: builtin-registry-auth
        secret:
          secretName: builtin-registry-auth
      - name: builtin-registry-certs
        secret:
          secretName: builtin-registry-certs
      - name: config-certificates
        secret:
          secretName: https-certificates
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/server-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  labels:
    app: gitpod
    component: server
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: gitpod
      component: server
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: server
      labels:
        app: gitpod
        component: server
        kind: pod
        stage: production
    spec:
      
      serviceAccountName: server
      enableServiceLinks: false
      initContainers:
      - name: msgbus-waiter
        image: gcr.io/gitpod-io/self-hosted/service-waiter:0.10.0
        args:
        - -v
        - messagebus
        securityContext:
          privileged: false
          runAsUser: 31001
        env:
        - name: MESSAGEBUS_USERNAME
          value: "your-rabbitmq-user"
        - name: MESSAGEBUS_PASSWORD
          value: "your-secret-rabbitmq-password"
        - name: MESSAGEBUS_CA
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: ca.crt
        - name: MESSAGEBUS_CERT
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.crt
        - name: MESSAGEBUS_KEY
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.key
      - name: database-waiter
        image: gcr.io/gitpod-io/self-hosted/service-waiter:0.10.0
        args:
        - -v
        - database
        securityContext:
          privileged: false
          runAsUser: 31001
        env:
        - name: DB_HOST
          value: "db"
        - name: DB_PORT
          value: "3306"
        - name: DB_PASSWORD
          value: "test"
        - name: DB_ENCRYPTION_KEYS
          value: "[\n    {\n        \"name\": \"general\",\n        \"version\": 1,\n        \"primary\": true,\n        \"material\": \"4uGh1q8y2DYryJwrVMHs0kWXJlqvHWWt/KJuNi04edI=\"\n    }\n]"
      containers:
      - name: server
        image: gcr.io/gitpod-io/self-hosted/server:0.10.0
        resources:
          requests:
            cpu:  200m
            memory:  200Mi
        
        ports:
        - name: debug
          containerPort: 9229
        - name: http
          containerPort: 3000
        - name: metrics
          containerPort: 9500
        securityContext:
          privileged: false
          runAsUser: 31001
        volumeMounts:
        - mountPath: /ws-manager-client-tls-certs
          name: ws-manager-client-tls-certs
          readOnly: true
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: VERSION
          value: "0.10.0"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        - name: DB_HOST
          value: "db"
        - name: DB_PORT
          value: "3306"
        - name: DB_PASSWORD
          value: "test"
        - name: DB_ENCRYPTION_KEYS
          value: "[\n    {\n        \"name\": \"general\",\n        \"version\": 1,\n        \"primary\": true,\n        \"material\": \"4uGh1q8y2DYryJwrVMHs0kWXJlqvHWWt/KJuNi04edI=\"\n    }\n]"
        
        
        - name: MESSAGEBUS_USERNAME
          value: "your-rabbitmq-user"
        - name: MESSAGEBUS_PASSWORD
          value: "your-secret-rabbitmq-password"
        - name: MESSAGEBUS_CA
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: ca.crt
        - name: MESSAGEBUS_CERT
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.crt
        - name: MESSAGEBUS_KEY
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.key
        - name: RATE_LIMITER_CONFIG
          value: "{\"functions\":{\"closePort\":{\"group\":\"inWorkspaceUserAction\"},\"controlAdmission\":{\"group\":\"inWorkspaceUserAction\"},\"openPort\":{\"group\":\"inWorkspaceUserAction\"},\"shareSnapshot\":{\"group\":\"inWorkspaceUserAction\"}},\"groups\":{\"inWorkspaceUserAction\":{\"durationsSec\":2,\"points\":10}}}"
        - name: GITPOD_LICENSE
          value: ""
        - name: GITPOD_DEFINITELY_GP_DISABLED
          value: "false"
        - name: NODE_ENV
          value: "production"
        - name: SERVER_VERSION
          value: "0.10.0"
        - name: SHLVL
          value: "1"
        - name: THEIA_PORT
          value: "23000"
        - name: THEIA_IMAGE_REPO
          value: "gcr.io/gitpod-io/self-hosted/ide/theia"
        - name: THEIA_VERSION
          value: "0.10.0"
        - name: CODE_IMAGE_REPO
          value: "gcr.io/gitpod-io/self-hosted/ide/code"
        - name: EXPERIMENTAL_FEATURE_FLAGS
          value: "[]"
        - name: WORKSPACE_DEFAULT_IMAGE
          value: "gitpod/workspace-full:latest"
        - name: IDE_IMAGE_ALIASES
          value: "{\"code\":\"gcr.io/gitpod-io/self-hosted/ide/code:0.10.0\"}"
        - name: SESSION_SECRET
          value: "Important!Really-Change-This-Key!"
        - name: WSMAN_CFG_MANAGERS
          value: "W3siZ292ZXJuIjp0cnVlLCJtYXhTY29yZSI6MTAwLCJuYW1lIjoibG9jYWwtMDAiLCJzY29yZSI6NTAsInN0YXRlIjoiYXZhaWxhYmxlIiwidGxzIjp7ImNhIjoiL3dzLW1hbmFnZXItY2xpZW50LXRscy1jZXJ0cy9jYS5jcnQiLCJjcnQiOiIvd3MtbWFuYWdlci1jbGllbnQtdGxzLWNlcnRzL3Rscy5jcnQiLCJrZXkiOiIvd3MtbWFuYWdlci1jbGllbnQtdGxzLWNlcnRzL3Rscy5rZXkifSwidXJsIjoiZG5zOi8vL3dzLW1hbmFnZXI6ODA4MCJ9XQ=="
        - name: GITPOD_BASEIMG_REGISTRY_WHITELIST
          value: "[]"
        - name: GITPOD_DEFAULT_FEATURE_FLAGS
          value: "[]"
        - name: INCREMENTAL_PREBUILDS_COMMIT_HISTORY
          value: "100"
        - name: AUTH_PROVIDERS_CONFIG
          valueFrom:
            configMapKeyRef:
              name: auth-providers-config
              key: auth-providers.json
        - name: BRANDING_CONFIG
          value: "{\"homepage\":\"https://www.gitpod.io/\",\"links\":{\"footer\":[{\"name\":\"Docs\",\"url\":\"https://www.gitpod.io/docs/\"},{\"name\":\"Blog\",\"url\":\"https://www.gitpod.io/blog/\"},{\"name\":\"Status\",\"url\":\"https://status.gitpod.io/\"}],\"header\":[{\"name\":\"Workspaces\",\"url\":\"/workspaces/\"},{\"name\":\"Docs\",\"url\":\"https://www.gitpod.io/docs/\"},{\"name\":\"Blog\",\"url\":\"https://www.gitpod.io/blog/\"},{\"name\":\"Community\",\"url\":\"https://community.gitpod.io/\"}],\"legal\":[{\"name\":\"Imprint\",\"url\":\"https://www.gitpod.io/imprint/\"},{\"name\":\"Privacy Policy\",\"url\":\"https://www.gitpod.io/privacy/\"},{\"name\":\"Terms of Service\",\"url\":\"https://www.gitpod.io/terms/\"}],\"social\":[{\"type\":\"GitHub\",\"url\":\"https://github.com/gitpod-io/gitpod\"},{\"type\":\"Discourse\",\"url\":\"https://community.gitpod.io/\"},{\"type\":\"Twitter\",\"url\":\"https://twitter.com/gitpod\"}]},\"logo\":\"/images/gitpod-ddd.svg\"}"
        - name: RUN_DB_DELETER
          value: "true"
        - name: SERVER_PROXY_APIKEY
          valueFrom:
            secretKeyRef:
              name: server-proxy-apikey
              key: apikey
        - name: GITPOD_GARBAGE_COLLECTION_DISABLED
          value: "false"
        - name: OAUTH_SERVER_JWT_SECRET
          value: "1wYRlXlQOJnm1eqq3uqa"
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: ws-manager-client-tls-certs
        secret:
          secretName: ws-manager-client-tls
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/ws-manager-bridge-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ws-manager-bridge
  labels:
    app: gitpod
    component: ws-manager-bridge
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: gitpod
      component: ws-manager-bridge
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: ws-manager-bridge
      labels:
        app: gitpod
        component: ws-manager-bridge
        kind: pod
        stage: production
    spec:
      
      serviceAccountName: ws-manager-bridge
      enableServiceLinks: false
      initContainers:
      - name: database-waiter
        image: gcr.io/gitpod-io/self-hosted/service-waiter:0.10.0
        args:
        - -v
        - database
        securityContext:
          privileged: false
          runAsUser: 31001
        env:
        - name: DB_HOST
          value: "db"
        - name: DB_PORT
          value: "3306"
        - name: DB_PASSWORD
          value: "test"
        - name: DB_ENCRYPTION_KEYS
          value: "[\n    {\n        \"name\": \"general\",\n        \"version\": 1,\n        \"primary\": true,\n        \"material\": \"4uGh1q8y2DYryJwrVMHs0kWXJlqvHWWt/KJuNi04edI=\"\n    }\n]"
      - name: msgbus-waiter
        image: gcr.io/gitpod-io/self-hosted/service-waiter:0.10.0
        args:
        - -v
        - messagebus
        securityContext:
          privileged: false
          runAsUser: 31001
        env:
        - name: MESSAGEBUS_USERNAME
          value: "your-rabbitmq-user"
        - name: MESSAGEBUS_PASSWORD
          value: "your-secret-rabbitmq-password"
        - name: MESSAGEBUS_CA
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: ca.crt
        - name: MESSAGEBUS_CERT
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.crt
        - name: MESSAGEBUS_KEY
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.key
      containers:
      - name: ws-manager-bridge
        image: gcr.io/gitpod-io/self-hosted/ws-manager-bridge:0.10.0
        resources:
          requests:
            cpu:  100m
            memory:  64Mi
        
        ports:
        - name: metrics
          containerPort: 9500
        securityContext:
          privileged: false
          runAsUser: 31001
        volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
        - mountPath: /ws-manager-client-tls-certs
          name: ws-manager-client-tls-certs
          readOnly: true
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: VERSION
          value: "0.10.0"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        - name: DB_HOST
          value: "db"
        - name: DB_PORT
          value: "3306"
        - name: DB_PASSWORD
          value: "test"
        - name: DB_ENCRYPTION_KEYS
          value: "[\n    {\n        \"name\": \"general\",\n        \"version\": 1,\n        \"primary\": true,\n        \"material\": \"4uGh1q8y2DYryJwrVMHs0kWXJlqvHWWt/KJuNi04edI=\"\n    }\n]"
        
        
        - name: MESSAGEBUS_USERNAME
          value: "your-rabbitmq-user"
        - name: MESSAGEBUS_PASSWORD
          value: "your-secret-rabbitmq-password"
        - name: MESSAGEBUS_CA
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: ca.crt
        - name: MESSAGEBUS_CERT
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.crt
        - name: MESSAGEBUS_KEY
          valueFrom:
            secretKeyRef:
                name: "messagebus-certificates-secret-core"
                key: tls.key
        - name: WSMAN_BRIDGE_CONFIGPATH
          value: /config/ws-manager-bridge.json
      volumes:
      - name: config
        configMap:
          name: ws-manager-bridge-config
      - name: ws-manager-client-tls-certs
        secret:
          secretName: ws-manager-client-tls
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/ws-manager-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ws-manager
  labels:
    app: gitpod
    component: ws-manager
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: gitpod
      component: ws-manager
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: ws-manager
      labels:
        app: gitpod
        component: ws-manager
        kind: pod
        stage: production
      annotations:
        checksum/tlskey: b643af68912229e198174f0ba85cd84411e064dc1c1f9ea07edd13ad8fbce709
    spec:
      
      serviceAccountName: ws-manager
      securityContext:
        runAsUser: 31002
      volumes:
      - name: config
        configMap:
          name: ws-manager-config
      - name: ws-daemon-tls-certs
        secret:
          secretName: ws-daemon-tls
      - name: tls-certs
        secret:
          secretName: ws-manager-tls
      - name: workspace-template
        configMap:
          name: workspace-template
      enableServiceLinks: false
      containers:
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      - name: ws-manager
        args: ["run", "-v", "--config", "/config/config.json"]
        image: gcr.io/gitpod-io/self-hosted/ws-manager:0.10.0
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  32Mi
        
        ports:
        - name: rpc
          containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
        - name: workspace-template
          mountPath: "/workspace-template"
          readOnly: true
        - mountPath: /ws-daemon-tls-certs
          name: ws-daemon-tls-certs
          readOnly: true
        - mountPath: /certs
          name: tls-certs
          readOnly: true
        securityContext:
          privileged: false
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: VERSION
          value: "0.10.0"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
        - name: GRPC_GO_RETRY
          value: "on"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/ws-proxy-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ws-proxy
  labels:
    app: gitpod
    component: ws-proxy
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: gitpod
      component: ws-proxy
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: ws-proxy
      labels:
        app: gitpod
        component: ws-proxy
        kind: pod
        stage: production
    spec:
      
      serviceAccountName: ws-proxy
      securityContext:
        runAsUser: 31002
      volumes:
      - name: config
        configMap:
          name: ws-proxy-config
      - name: ws-manager-client-tls-certs
        secret:
          secretName: ws-manager-client-tls
      - name: config-certificates
        secret:
          secretName: https-certificates
      enableServiceLinks: false
      containers:
      - name: ws-proxy
        image: gcr.io/gitpod-io/self-hosted/ws-proxy:0.10.0
        args: ["run", "-v", "/config/config.json"]
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  64Mi
        
        ports:
        - name: httpproxy
          containerPort: 8080
        - name: httpsproxy
          containerPort: 9090
        - name: metrics
          containerPort: 9500
        readinessProbe:
          initialDelaySeconds: 2
          periodSeconds: 5
          failureThreshold: 10
          httpGet:
            path: /
            port: 60088
        volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
        - mountPath: /ws-manager-client-tls-certs
          name: ws-manager-client-tls-certs
          readOnly: true
        - name: config-certificates
          mountPath: "/mnt/certificates"
        securityContext:
          privileged: false
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: VERSION
          value: "0.10.0"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/templates/ws-scheduler-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ws-scheduler
  labels:
    app: gitpod
    component: ws-scheduler
    kind: deployment
    stage: production
spec:
  selector:
    matchLabels:
      app: gitpod
      component: ws-scheduler
      kind: pod
      stage: production
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      name: ws-scheduler
      labels:
        app: gitpod
        component: ws-scheduler
        kind: pod
        stage: production
    spec:
      
      serviceAccountName: ws-scheduler
      securityContext:
        runAsUser: 31002
      volumes:
      - name: config
        configMap:
          name: ws-scheduler-config
      - name: ws-manager-client-tls-certs
        secret:
          secretName: ws-manager-client-tls
      enableServiceLinks: false
      containers:
      - name: scheduler
        args: ["run", "-v", "--config", "/config/config.json"]
        image: gcr.io/gitpod-io/self-hosted/ws-scheduler:0.10.0
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu:  100m
            memory:  32Mi
        
        volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
        - mountPath: /ws-manager-client-tls-certs
          name: ws-manager-client-tls-certs
          readOnly: true
        securityContext:
          privileged: false
        env:
        - name: KUBE_STAGE
          value: "production"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBE_DOMAIN
          value: "svc.cluster.local"
        - name: VERSION
          value: "0.10.0"
        - name: GITPOD_DOMAIN
          value: "localhost"
        - name: HOST_URL
          value: "https://localhost"
        - name: GITPOD_REGION
          value: "local"
        - name: GITPOD_INSTALLATION_LONGNAME
          value: production.gitpod.local.00
        - name: GITPOD_INSTALLATION_SHORTNAME
          value: local-00
        - name: LOG_LEVEL
          value: "trace"
        
      - name: kube-rbac-proxy
        image: quay.io/brancz/kube-rbac-proxy:v0.9.0
        args:
        - --v=10
        - --logtostderr
        - --insecure-listen-address=[$(IP)]:9500
        - --upstream=http://127.0.0.1:9500/
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9500
          name: metrics
        resources:
          requests:
            cpu: 1m
            memory: 30Mi
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        terminationMessagePolicy: FallbackToLogsOnError
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Source: gitpod/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: gitpod
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-8.6.2
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: gitpod
      app.kubernetes.io/component: primary
  serviceName: mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 7749098530b5a8d0ed58c9387e19bba85ad2947de23a0fa35b0a565e60ce18ea
      labels:
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-8.6.2
        app.kubernetes.io/instance: gitpod
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      
      serviceAccountName: db
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mysql
                    app.kubernetes.io/instance: gitpod
                    app.kubernetes.io/component: primary
                namespaces:
                  - "gitpod"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/bitnami-shell:10-debian-10-r92
          imagePullPolicy: "Always"
          command:
            - /bin/bash
            - -ec
            - |
              chown -R 1001:1001 /bitnami/mysql
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:5.7.34-debian-10-r55
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: "my_database"
            - name: MYSQL_EXTRA_FLAGS
              value: --explicit-defaults-for-timestamp=OFF
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 60
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests:
              memory: 128Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: mysql
        - name: custom-init-scripts
          configMap:
            name: db-init-scripts
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: mysql
          app.kubernetes.io/instance: gitpod
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: gitpod/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: messagebus
  namespace: "gitpod"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.16.0
    app.kubernetes.io/instance: gitpod
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: messagebus-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: gitpod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.16.0
        app.kubernetes.io/instance: gitpod
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: 90a1f33404b1dd2fdcde2db38c98634f9c2b87969c47af6b10db2dcba3336d0c
        checksum/secret: 5fb4ab396a817583cfc73498a2b2315fadbdac80acfcd2cea34bc374e109d7d8
        
        prometheus.io/port: '9419'
        prometheus.io/scrape: "true"
    spec:
      
      serviceAccountName: messagebus
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: rabbitmq
                    app.kubernetes.io/instance: gitpod
                namespaces:
                  - "gitpod"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 120
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.8.17-debian-10-r1
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "messagebus-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: messagebus-erlang-cookie
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "yes"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "no"
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_shovel, rabbitmq_shovel_management, rabbitmq_prometheus"
            - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
              value: +sbwt none +sbwtdcpu none +sbwtdio none
          ports:
            - name: amqp
              containerPort: 5672
            - name: amqp-ssl
              containerPort: 5671
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
            - name: metrics
              containerPort: 9419
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits: {}
            requests: {}
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d  "false"
                    else
                        rabbitmqctl stop_app
                    fi
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
            - name: certs
              mountPath: /opt/bitnami/rabbitmq/certs
            - name: load-definition-volume
              mountPath: /app
              readOnly: true
      volumes:
        - name: certs
          secret:
            secretName: messagebus-certificates-secret-core
            items:
              - key: tls.crt
                path: ca_certificate.pem
              - key: tls.crt
                path: server_certificate.pem
              - key: tls.key
                path: server_key.pem
        - name: configuration
          configMap:
            name: messagebus-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
        - name: load-definition-volume
          secret:
            secretName: "load-definition"
        - name: data
          emptyDir: {}
---
# Source: gitpod/templates/certmanager-ca.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/chargebee-config-secret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/db-deployment.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/db-sync-configmap.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/db-sync-deployment.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/db-sync-serviceaccount.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/db-sync-unprivileged-rolebinding.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/image-builder-registry-auth-secret.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-config-secret.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-deployment.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-networkpolicy.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-role.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-rolebinding.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-service.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-serviceaccount.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/kedge-unpriviliged-rolebinding.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/payment-endpoint-deny-all-allow-explicit-networkpolicy.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/payment-endpoint-deployment.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/payment-endpoint-rolebinding.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/payment-endpoint-service.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/payment-endpoint-serviceaccount.yaml
# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/restarter-cronjob.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/restarter-role.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/restarter-rolebinding.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/restarter-serviceaccount.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.
---
# Source: gitpod/templates/db-migrations-job.yaml
# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.


apiVersion: batch/v1
kind: Job
metadata:
  name: db-migrations
  labels:
    app: gitpod
    component: db-migrations
    kind: job
    stage: production
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    # see https://github.com/helm/helm/blob/master/docs/charts_hooks.md
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-delete-timeout": "0"
spec:
  template:
    metadata:
      name: db-migrations
      labels:
        app: gitpod
        component: db-migrations
        kind: job
        stage: production
    spec:
      
      restartPolicy: Never
      serviceAccountName: db-migrations
      imagePullSecrets:
      enableServiceLinks: false
      containers:
      - name: db-migrations
        image: "gcr.io/gitpod-io/self-hosted/db-migrations:0.10.0"
        env:
        - name: "DB_PASSWORD"
          value: "test"
        - name: "DB_PORT"
          value: "3306"
        - name: "DB_HOST"
          value: "db"
        command: ["sh","-c","cd /app/node_modules/@gitpod/gitpod-db && yarn run wait-for-db && yarn run typeorm migrations:run"]
